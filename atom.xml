<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lei’s Blog</title>
  <subtitle>不忘初心，淡然前行</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://LeiHolmes.github.io/"/>
  <updated>2017-11-09T07:57:13.000Z</updated>
  <id>http://LeiHolmes.github.io/</id>
  
  <author>
    <name>徐雷</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RxBinding系列之RxView(一)</title>
    <link href="http://LeiHolmes.github.io/2017/11/09/RxBinding%E7%B3%BB%E5%88%97%E4%B9%8BRxView(%E4%B8%80)/"/>
    <id>http://LeiHolmes.github.io/2017/11/09/RxBinding系列之RxView(一)/</id>
    <published>2017-11-08T16:00:00.000Z</published>
    <updated>2017-11-09T07:57:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　自从用上RxJava后彻底迷上Rx系列响应式编程，从本篇开始一起来学习一下Rx套餐之一的RxBinding。RxBinding是什么？它是一组开源库，来自大神Jake Wharton之手，可将Android中各类UI控件的动作事件转换为RxJava中的数据流。也就是说使用RxBinding，我们就可以以RxJava的形式来处理UI事件。本篇主要讲解其中RxView的相关View事件如何绑定。<br>　　<a id="more"></a><br>　　RxBinding中主要包含RxView、RxTextView、RxAdapterView、RxCompoundButton等等。由于全写一起篇幅太长，我就一篇讲解一种了。本系列主要讲解以上常用的4种，详细内容可飞机到：<br>　　<a href="https://github.com/JakeWharton/RxBinding" target="_blank" rel="external">Jake Wharton的RxBinding</a></p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>　　本系列围绕我自己编写的RxBindingDemo来进行讲解，项目中主要使用ButterKnife做View注入，RxBinding做事件绑定。RxBindingDemo代码在文末有给地址。<br>　　<strong>注意：RxBinding包中包含RxJava的内容，所以就无需再添加RxJava的依赖了。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ......</div><div class="line">    compile <span class="string">'com.jakewharton.rxbinding2:rxbinding:2.0.0'</span></div><div class="line">    compile <span class="string">'com.jakewharton:butterknife:8.8.1'</span></div><div class="line">    annotationProcessor <span class="string">'com.jakewharton:butterknife-compiler:8.8.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="BaseActivity"><a href="#BaseActivity" class="headerlink" title="BaseActivity"></a>BaseActivity</h3><p>　　相信学习过RxJava的码友一定记得，使用RxJava实例化的Disposable需在不用时及时销毁。<br>由于每个Activity中都写一套add与clear的方法会造成代码冗余，所以我将它们封装到BaseActivity中方便统一对Disposable进行管理，以及ButterKnife的统一绑定与解绑。<br>　　献上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> CompositeDisposable mCompositeDisposable;</div><div class="line">    <span class="keyword">private</span> Unbinder mUnbinder;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(getLayoutId());</div><div class="line">        mUnbinder = ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        mCompositeDisposable = <span class="keyword">new</span> CompositeDisposable();</div><div class="line">        onViewCreated(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 添加订阅</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDisposable</span><span class="params">(Disposable mDisposable)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCompositeDisposable == <span class="keyword">null</span>) &#123;</div><div class="line">            mCompositeDisposable = <span class="keyword">new</span> CompositeDisposable();</div><div class="line">        &#125;</div><div class="line">        mCompositeDisposable.add(mDisposable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 取消所有订阅</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearDisposable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mCompositeDisposable != <span class="keyword">null</span>) &#123;</div><div class="line">            mCompositeDisposable.clear();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        clearDisposable();</div><div class="line">        mUnbinder.unbind();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getLayoutId</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(Bundle savedInstanceState)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="click点击事件"><a href="#click点击事件" class="headerlink" title="click点击事件"></a>click点击事件</h3><h4 id="clicks"><a href="#clicks" class="headerlink" title="clicks"></a>clicks</h4><p>　　<code>RxView.clicks(View view)</code>，通过源码可发现其内部封装了View.OnClickListener点击监听，调用clicks方法返回一个Observable对象，每当点击这个View的时候，该Observable对象就会发射一个事件，随即调用onNext()方法，Observable对应的观察者就可以通过onNext()回调响应此次点击事件。使用RxBinding还可做到点击防抖的效果。来看代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">addDisposable(RxView.clicks(btnClick)</div><div class="line">        .throttleFirst(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(o -&gt; &#123;</div><div class="line">            Log.e(<span class="string">"rx_binding_test"</span>, <span class="string">"clicks:点击了按钮：两秒内防抖"</span>);</div><div class="line">        &#125;));</div></pre></td></tr></table></figure></p>
<p>　　<code>throttleFirst(long windowDuration, TimeUnit unit)</code>，设置一定时间内只响应首次(throttleFirst)或者末次(throttleLast)的点击事件。windowDuration为防抖时间，unit为时间单位。调用这个方法便可防止短时间内对View的重复点击，本例中设置的防抖时间为2s。从代码看来是不是方便又简洁呢，以往实现防抖还得添加各种标记，忒麻烦。</p>
<h4 id="longClicks"><a href="#longClicks" class="headerlink" title="longClicks"></a>longClicks</h4><p>　　<code>RxView.longClicks(View view)</code>，内部封装了View.OnLongClickListener长按监听，原理同上。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">addDisposable(RxView.longClicks(btnClick)</div><div class="line">        .subscribe(o -&gt; &#123;</div><div class="line">            Log.e(<span class="string">"rx_binding_test"</span>, <span class="string">"longClicks:长点击了按钮"</span>);</div><div class="line">        &#125;));</div></pre></td></tr></table></figure></p>
<h3 id="draw绘制事件"><a href="#draw绘制事件" class="headerlink" title="draw绘制事件"></a>draw绘制事件</h3><p>　　<code>RxView.draws(View view)</code>，内部封装了OnDrawListener绘制监听。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击btnDraw调用viewCanvas的绘制</span></div><div class="line">addDisposable(RxView.clicks(btnDraw)</div><div class="line">        .throttleFirst(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(o -&gt; &#123;</div><div class="line">            <span class="comment">//此处可模拟让viewCanvas绘制</span></div><div class="line">            <span class="comment">//viewCanvas.getViewTreeObserver().dispatchOnDraw();</span></div><div class="line">        &#125;));</div><div class="line">        </div><div class="line"><span class="comment">//当viewCanvas绘制时触发</span></div><div class="line">addDisposable(RxView.draws(viewCanvas)</div><div class="line">        .subscribe(o -&gt; &#123;</div><div class="line">            Log.e(<span class="string">"rx_binding_test"</span>, <span class="string">"draws:viewCanvas绘制了"</span>);</div><div class="line">        &#125;));</div></pre></td></tr></table></figure></p>
<h3 id="drag拖拽事件"><a href="#drag拖拽事件" class="headerlink" title="drag拖拽事件"></a>drag拖拽事件</h3><p>　　<code>RxView.drags(View view)</code>，内部封装了OnDragListener拖拽监听。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当btnDraw被拖拽时触发</span></div><div class="line">addDisposable(RxView.drags(btnDraw)</div><div class="line">        .subscribe(o -&gt; &#123;</div><div class="line">            Log.e(<span class="string">"rx_binding_test"</span>, <span class="string">"drags:btnDraw被拖拽了"</span>);</div><div class="line">        &#125;));</div></pre></td></tr></table></figure></p>
<h3 id="layoutChange布局改变事件"><a href="#layoutChange布局改变事件" class="headerlink" title="layoutChange布局改变事件"></a>layoutChange布局改变事件</h3><p>　　<code>RxView.layoutChanges(View view)</code>，内部封装了OnLayoutChangeListener布局改变监听。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击btnChange改变btn_layout的布局,防抖2s</span></div><div class="line">addDisposable(RxView.clicks(btnChange)</div><div class="line">        .throttleFirst(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(o -&gt; btnLayout.layout(btnLayout.getLeft() - <span class="number">20</span>, </div><div class="line">                btnLayout.getTop(), btnLayout.getRight() - <span class="number">20</span>, btnLayout.getBottom())</div><div class="line">        ));</div><div class="line">        </div><div class="line"><span class="comment">//btn_layout布局改变时触发</span></div><div class="line">addDisposable(RxView.layoutChanges(btnLayout)</div><div class="line">        .subscribe(o -&gt; &#123;</div><div class="line">            Log.e(<span class="string">"rx_binding_test"</span>, <span class="string">"layoutChanges:btnLayout布局改变了"</span>);</div><div class="line">        &#125;));</div></pre></td></tr></table></figure></p>
<h3 id="scrollChange滑动事件"><a href="#scrollChange滑动事件" class="headerlink" title="scrollChange滑动事件"></a>scrollChange滑动事件</h3><p>　　<code>RxView.scrollChangeEvents(View view)</code>，内部封装了OnScrollChangeListener滑动监听。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//点击btnScroll模拟让btnScrollLayout滑动</span></div><div class="line">addDisposable(RxView.clicks(btnScroll)</div><div class="line">        .throttleFirst(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(o -&gt; &#123;</div><div class="line">            x += <span class="number">10</span>;</div><div class="line">            <span class="keyword">if</span> (x == <span class="number">100</span>) &#123;</div><div class="line">                x = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">            btnScrollLayout.scrollTo(x, <span class="number">0</span>);</div><div class="line">        &#125;));</div><div class="line">        </div><div class="line"><span class="comment">//btnScrollLayout滑动时触发</span></div><div class="line">addDisposable(RxView.scrollChangeEvents(btnScrollLayout)</div><div class="line">        .subscribe(event -&gt; &#123;</div><div class="line">            Log.e(<span class="string">"rx_binding_test"</span>, <span class="string">"scrollChangeEvents:btnScrollLayout滑动了:"</span> + event.toString());</div><div class="line">        &#125;));</div></pre></td></tr></table></figure></p>
<h3 id="View操作"><a href="#View操作" class="headerlink" title="View操作"></a>View操作</h3><p>　　RxBinding中还封装了一些常用的例如<code>setVisibility()</code>、<code>setClickable()</code>等View操作。使用起来也很简单，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">addDisposable(RxView.clicks(btnClick)</div><div class="line">        .throttleFirst(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(o -&gt; &#123;</div><div class="line">            RxView.visibility(btnClick).accept(<span class="keyword">true</span>);</div><div class="line">            RxView.clickable(btnClick).accept(<span class="keyword">true</span>);</div><div class="line">            RxView.enabled(btnClick).accept(<span class="keyword">true</span>);</div><div class="line">        &#125;));</div></pre></td></tr></table></figure></p>
<p>　　这种操作方法单独使用是需要进行try-catch的，但还记得RxJava2系列中我们学习到，RxJava2的Action与Function的回调方法中都默认throws Exception，RxBinding也是如此。所以在观察者中调用就无需try-catch了。<br>　　更多的操作可在RxView的源码中查到，基本上View中有的，J大神都编写了，膜拜大神。</p>
<h3 id="取消订阅"><a href="#取消订阅" class="headerlink" title="取消订阅"></a>取消订阅</h3><p>　　最后别忘了在Activity销毁时对创建的Disposable取消订阅。Demo中的Act都以BaseActivity为基类，所以就无需再调用取消订阅了，BaseActivity已经将这些工作做好了。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　RxBinding使用起来非常简单，RxView中还有attaches、detaches，focusChanges，globalLayouts，hovers，touches等等就不一一演示了，码友们可自行尝试。<br>　　进阶中的码猿一枚，写的不对的地方欢迎大神们留言指正，有什么疑惑或者建议也可以在我Github上RxBindingDemo项目Issues中提出，我会及时回复。<br>　　附上Demo的地址：<br>　　<a href="https://github.com/LeiHolmes/RxBindingDemo" target="_blank" rel="external">RxBindingDemo</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　自从用上RxJava后彻底迷上Rx系列响应式编程，从本篇开始一起来学习一下Rx套餐之一的RxBinding。RxBinding是什么？它是一组开源库，来自大神Jake Wharton之手，可将Android中各类UI控件的动作事件转换为RxJava中的数据流。也就是说使用RxBinding，我们就可以以RxJava的形式来处理UI事件。本篇主要讲解其中RxView的相关View事件如何绑定。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RxBinding" scheme="http://LeiHolmes.github.io/tags/RxBinding/"/>
    
  </entry>
  
  <entry>
    <title>RxJava2系列实践之倒计时功能(三)</title>
    <link href="http://LeiHolmes.github.io/2017/11/07/RxJava2%E7%B3%BB%E5%88%97%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%80%92%E8%AE%A1%E6%97%B6%E5%8A%9F%E8%83%BD(%E4%B8%89)/"/>
    <id>http://LeiHolmes.github.io/2017/11/07/RxJava2系列实践之倒计时功能(三)/</id>
    <published>2017-11-06T16:00:00.000Z</published>
    <updated>2017-11-07T05:51:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　通过本系列前两篇的学习，相信各位码友已经基本掌握RxJava2怎么使用了，本篇我们一起来通过一个小例子实践一下，也可以加深印象。来看看如何使用RxJava2的intervalRange操作符实现倒计时功能。<br>　　<a id="more"></a></p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>　　首先添加依赖，Demo中使用了ButterKnife注入，各版本以当前最新的为准。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ......</div><div class="line">    compile <span class="string">'io.reactivex.rxjava2:rxjava:2.1.3'</span></div><div class="line">    compile <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></div><div class="line">    compile <span class="string">'com.jakewharton:butterknife:8.7.0'</span></div><div class="line">    annotationProcessor <span class="string">'com.jakewharton:butterknife-compiler:8.7.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="intervalRange操作符"><a href="#intervalRange操作符" class="headerlink" title="intervalRange操作符"></a>intervalRange操作符</h3><p>　　别着急上代码，开始前我们先来了解下intervalRange操作符（了解过的可以忽略哈）。<br>　　<strong>intervalRange(long start, long count, long initialDelay, long period, TimeUnit unit)</strong>  </p>
<ul>
<li>start：起始数值</li>
<li>count：发射数量</li>
<li>initialDelay：延迟执行时间</li>
<li>period：发射周期时间</li>
<li>unit：时间单位</li>
</ul>
<p>　　一句话简介就是延迟initialDelay个unit单位后，以period为周期，依次发射count个以start为初始值并递增的数字。</p>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><p>　　布局中放一个Button用来演示点击获取验证码，并开启倒计时重新获取的功能。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:padding</span>=<span class="string">"15dp"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.holmeslei.rxjava2demo.ui.CountDownActivity"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">        <span class="attr">android:id</span>=<span class="string">"@+id/btn_get_code"</span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"获取验证码"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><p>　　由于业务逻辑简单，所以就不整什么复杂的框架了，功能都在Activity中实现。</p>
<ol>
<li>第一步，使用ButterKnife依赖注入获取Button的实例及设置其点击监听方法。</li>
<li>第二步，点击Button后首先将其设置为不可点击，然后初始化全局变量Disposable。</li>
<li>第三步，使用Flowable的intervalRange操作符，从0开始每隔1s发射一个自增的数字，持续11次，延迟0s执行。这样就设定好了10秒的倒计时，可根据实际需要修改时长。</li>
<li>由于需要刷新UI，所以设定观察者执行在Android的UI线程。</li>
<li>在doOnNext的回调中更新Button的显示UI，达到读秒的效果。</li>
<li>在doOnComplete的完成回调中重新将Button设置为可点击，然后设置显示UI。</li>
<li>最后调用后subscribe()订阅，这样一个完整的异步事件流就完成了。</li>
<li>别忘了在Activity销毁时将全局Disposable取消订阅销毁掉。使用RxJava将无用的Disposable及时销毁是一个很好的习惯，否则后期就得忙着处理各种OOM异常啦。</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="meta">@BindView</span>(R.id.btn_get_code)</div><div class="line">    Button btnGetCode;</div><div class="line">    <span class="keyword">private</span> Disposable mdDisposable;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_count_down);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OnClick</span>(R.id.btn_get_code)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//点击后置为不可点击状态</span></div><div class="line">        btnGetCode.setEnabled(<span class="keyword">false</span>);</div><div class="line">        <span class="comment">//从0开始发射11个数字为：0-10依次输出，延时0s执行，每1s发射一次。</span></div><div class="line">        mdDisposable = Flowable.intervalRange(<span class="number">0</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">1</span>, TimeUnit.SECONDS)</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .doOnNext(<span class="keyword">new</span> Consumer&lt;Long&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Long aLong)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        btnGetCode.setText(<span class="string">"重新获取("</span> + (<span class="number">10</span> - aLong) + <span class="string">")"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .doOnComplete(<span class="keyword">new</span> Action() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                        <span class="comment">//倒计时完毕置为可点击状态</span></div><div class="line">                        btnGetCode.setEnabled(<span class="keyword">true</span>);</div><div class="line">                        btnGetCode.setText(<span class="string">"获取验证码"</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">                .subscribe();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (mdDisposable != <span class="keyword">null</span>) &#123;</div><div class="line">            mdDisposable.dispose();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h3><p>　　最后看一下运行效果Gif。</p>
<p><div align="center"><br>　　<img src="http://upload-images.jianshu.io/upload_images/8575775-5ff83e5114601b52.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行效果"><br></div></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　本篇文章利用RxJava2演示了一个倒计时的小栗子，更多的用法还待各位码友去探索与发现哈。<br>　　进阶中的码猿一枚，写的不对的地方欢迎大神们留言指正，有什么疑惑或者建议也可以在我Github上RxJava2Demo项目Issues中提出，我会及时回复。<br>　　附上RxJava2Demo的地址：<br>　　<a href="https://github.com/LeiHolmes/RxJava2Demo" target="_blank" rel="external">RxJava2Demo</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　通过本系列前两篇的学习，相信各位码友已经基本掌握RxJava2怎么使用了，本篇我们一起来通过一个小例子实践一下，也可以加深印象。来看看如何使用RxJava2的intervalRange操作符实现倒计时功能。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://LeiHolmes.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava2系列之相较RxJava1的更新之处(二)</title>
    <link href="http://LeiHolmes.github.io/2017/11/05/RxJava2%E7%B3%BB%E5%88%97%E4%B9%8B%E7%9B%B8%E8%BE%83RxJava1%E7%9A%84%E6%9B%B4%E6%96%B0%E4%B9%8B%E5%A4%84(%E4%BA%8C)/"/>
    <id>http://LeiHolmes.github.io/2017/11/05/RxJava2系列之相较RxJava1的更新之处(二)/</id>
    <published>2017-11-04T16:00:00.000Z</published>
    <updated>2017-11-06T08:59:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　通过本系列上一篇文章，我们了解了RxJava1中由于被观察者发送事件的速度远快于观察者处理事件的速度导致的背压问题，由此而生出背压策略。虽然RxJava1中有一些操作符支持背压策略，也有一些其他方法，但效果并不太理想。这个问题到了RxJava2中得到了更好地解决。本篇一起来看相较于RxJava1，RxJava2从观察者模式到语法以及线程调度都做了哪些更新。<br>　　<a id="more"></a></p>
<h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>　　首先当然是添加RxJava2与RxAndroid2的依赖啦，以当前最新版本为准。虽然RxAndroid中包含RxJava的内容，但尝试了一下，只引入RxAndroid还是会报错，所以两依赖都加上了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    ......</div><div class="line">    compile <span class="string">'io.reactivex.rxjava2:rxjava:2.1.3'</span></div><div class="line">    compile <span class="string">'io.reactivex.rxjava2:rxandroid:2.0.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>注意：RxJava2与RxJava1的依赖不可共存</strong></p>
<h3 id="观察者模式更新"><a href="#观察者模式更新" class="headerlink" title="观察者模式更新"></a>观察者模式更新</h3><p>　　RxJava2中除了保留了RxJava1中Observable–&gt;Observer观察者模式以外，还新增了一种观察者模式Flowable–&gt;Subscriber。目的为何相信大家已经知道了，新观察者模式可完美支持背压策略。<br>　　不了解背压策略的码友欢迎阅读上一篇文章：<br>　　<a href="http://xulei.tech/2017/10/29/RxJava2系列之背压策略(一" target="_blank" rel="external">RxJava2系列之背压策略(一)</a>)  </p>
<p><div align="center"><br>　　<img src="/img/RxJava/RxJava2.png" alt="自绘结构图"><br></div><br>　　由结构图可见，RxJava2将RxJava1中支持背压与不支持背压的操作符分开了，支持背压的归入Flowable观察者模式中，不支持背压的归入Observable观察者模式中。  </p>
<p>　　来看一个使用range操作符的Flowable示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Flowable.range(<span class="number">1</span>, <span class="number">4</span>).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">    Subscription subscription;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription s)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx2_test"</span>, <span class="string">"onSubscribe"</span>);</div><div class="line">        subscription = s;</div><div class="line">        <span class="comment">//这里可进行一些初始化操作</span></div><div class="line">        subscription.request(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx2_test"</span>, <span class="string">"onNext："</span> + integer);</div><div class="line">        subscription.request(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable t)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx2_test"</span>, <span class="string">"onError："</span> + t.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx2_test"</span>, <span class="string">"onComplete"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rx2_test: onSubscribe</div><div class="line">rx2_test: onNext：<span class="number">1</span></div><div class="line">rx2_test: onNext：<span class="number">2</span></div><div class="line">rx2_test: onNext：<span class="number">3</span></div><div class="line">rx2_test: onNext：<span class="number">4</span></div><div class="line">rx2_test: onComplete</div></pre></td></tr></table></figure></p>
<p>　　由示例可以看出Flowable是支持背压策略的，整个数据流是由Subscriber动态去请求，然后Flowable再响应发射事件。订阅之后首先回调onSubscribe()方法，相当于onStart()方法，建议在其中<strong>先进行一些初始化的操作然后再调用request(n)请求数据</strong>。示例中的Subscription可用于请求数据或在发射过程中满足某些条件时进行取消订阅的操作。  </p>
<p>　　再来看一个使用create操作符的Flowable示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Flowable.create((FlowableOnSubscribe&lt;Integer&gt;) e -&gt; &#123;</div><div class="line">            e.onNext(<span class="number">1</span>);</div><div class="line">            e.onNext(<span class="number">2</span>);</div><div class="line">            e.onNext(<span class="number">3</span>);</div><div class="line">            e.onNext(<span class="number">4</span>);</div><div class="line">            e.onComplete();</div><div class="line">        &#125;,</div><div class="line">        BackpressureStrategy.BUFFER)</div><div class="line">        .subscribe(<span class="keyword">new</span> MySubscription());</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">rx2_test: onSubscribe</div><div class="line">rx2_test: onNext：<span class="number">1</span></div><div class="line">rx2_test: onNext：<span class="number">2</span></div><div class="line">rx2_test: onNext：<span class="number">3</span></div><div class="line">rx2_test: onNext：<span class="number">4</span></div><div class="line">rx2_test: onComplete</div></pre></td></tr></table></figure></p>
<p>　　Flowable也可使用create操作符来创建，但需指定背压策略<code>BackpressureStrategy.BUFFER</code>。<br>　　<br>　　除此之外还有几种观察者模式：</p>
<ul>
<li>Single/SingleObserver：订阅后只能接收到一次</li>
<li>Completable/CompletableObserver：只能接收到完成(onComplete)和错误(onError)回调。</li>
<li>Maybe/MaybeObserver：只能接收到一次true或false的数据</li>
</ul>
<p>　　这几种观察者模式主要用来判断单一状态，不用来发送大量数据。实际使用频率不高就不一一赘述了。
　　</p>
<h3 id="语法更新"><a href="#语法更新" class="headerlink" title="语法更新"></a>语法更新</h3><p>　　语法更新方面，大部分操作符的用法都未改动，有改动的是RxJava1中ActionN，FuncN等等的包名类名。</p>
<h4 id="Action更新"><a href="#Action更新" class="headerlink" title="Action更新"></a>Action更新</h4><p>　　更新内容见图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/Action.png" alt=""><br></div><br>　　用法示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Flowable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx2_test"</span>, <span class="string">"actionChange："</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<h4 id="Func更新"><a href="#Func更新" class="headerlink" title="Func更新"></a>Func更新</h4><p>　　更新内容见图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/Func.png" alt=""><br></div><br>　　用法示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Flowable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .map(<span class="keyword">new</span> Function&lt;Integer, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(@NonNull Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"xulei"</span> + integer;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(String s)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx2_test"</span>, <span class="string">"funcChange："</span> + s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　<strong>注意：在Rxjava2中，Action与Function的回调方法中都默认throws Exception，可以不进行try-catch的操作。</strong>  </p>
<h4 id="Subscription更新"><a href="#Subscription更新" class="headerlink" title="Subscription更新"></a>Subscription更新</h4><p>　　Subscription改名为Disposable。由于RxJava2中已经存在了<code>org.reactivestreams.subscription</code>这个类，为了避免名字冲突将原先的<code>rx.Subscription</code>改名为<code>io.reactivex.disposables.Disposable</code>。<br>　　CompositeSubscription也改名为CompositeDisposable。<br>　　<strong>注意：Disposable必须单次使用，用完就要销毁。</strong><br>　　<br>　　需要强调的是，当一个Activity中有多个RxJava异步事件流也就是Disposable时，需要根据事务周期及时进行销毁，否则会导致内存慢慢的，慢慢的……Bang！！！你懂得。那怎么进行集体销毁呢？一起来看下RxJava2中如何实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> CompositeDisposable mCompositeDisposable;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 添加RxJava订阅</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addDisposable</span><span class="params">(Disposable disposable)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mCompositeDisposable == <span class="keyword">null</span>) &#123;</div><div class="line">        mCompositeDisposable = <span class="keyword">new</span> CompositeDisposable();</div><div class="line">    &#125;</div><div class="line">    mCompositeDisposable.add(subscription);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 取消RxJava订阅</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">clearDisposable</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (mCompositeDisposable != <span class="keyword">null</span>) &#123;</div><div class="line">        mCompositeDisposable.clear();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　创建一个CompositeDisposable对象(替代RxJava1中CompositeSubscription)，在实例化RxJava2中的Disposable时可调用其<code>add(Disposable d)</code>将Disposable加入其中。等到Activity销毁或者不需要时便可调用其<code>clear()</code>方法对其中的Disposable进行统一取消订阅并销毁的操作。  </p>
<p>　　使用示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(......);</div><div class="line">    addDisposable(Flowable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .subscribe((integer -&gt; Log.e(<span class="string">"rx2_test"</span>, <span class="string">""</span> + integer))));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onDestroy();</div><div class="line">    clearDisposable()</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>建议：<code>addSubscribe(Disposable disposable)</code>与<code>clearDisposable()</code>可放入BaseActivity或者MVP架构中的BasePresenter中，便于统一管理，使代码更加简洁。</strong>
　　</p>
<h4 id="新增doOnCancel等"><a href="#新增doOnCancel等" class="headerlink" title="新增doOnCancel等"></a>新增doOnCancel等</h4><p>　　RxJava2中除了保留了RxJava1中<code>doOnComplete()</code>，<code>doOnError()</code>，<code>doOnNext()</code>等状态回调之外，还增加了<code>doOnCancel</code>，<code>doOnDispose</code>，<code>unsubscribeOn</code>这几个状态回调，以<code>doOnCancel</code>为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Flowable.range(<span class="number">1</span>, <span class="number">4</span>)</div><div class="line">        .doOnCancel(<span class="keyword">new</span> Action() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx2_test"</span>, <span class="string">"回调doOnCancel"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .take(<span class="number">2</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Consumer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Integer integer)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx2_test"</span>, <span class="string">"doOnCancel："</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">rx2_test: doOnCancel：<span class="number">1</span></div><div class="line">rx2_test: doOnCancel：<span class="number">2</span></div><div class="line">rx2_test: 回调doOnCancel</div></pre></td></tr></table></figure></p>
<p>　　由于<code>.take(2)</code>操作符只截取了前两个事件，之后的事件未被发送，就会回调doOnCancel中的run()方法。</p>
<h4 id="线程调度更新"><a href="#线程调度更新" class="headerlink" title="线程调度更新"></a>线程调度更新</h4><p>　　线程调度这里改动也不大，主要有以下三点：  </p>
<ul>
<li>移除Schedulers.immediate。</li>
<li>移除Schedulers.test。</li>
<li>io.reactivex.Scheduler抽象类支持直接调度自定义线程任务。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　本文主要讲解了RxJava2中常用点的更新，更多细节的调整各位码友可以参考官网文档。了解了理论还需勤加练习才能真正掌握RxJava2，下一篇我们将通过一个实际例子来实践一下RxJava2，敬请期待。<br>　　进阶中的码猿一枚，写的不对的地方欢迎大神们留言指正，有什么疑惑或者建议也可以在我Github上RxJava2Demo项目Issues中提出，我会及时回复。<br>　　附上RxJava2Demo的地址：<br>　　<a href="https://github.com/LeiHolmes/RxJava2Demo" target="_blank" rel="external">RxJava2Demo</a><br>　　<strong>注意：本文中插入的图片均为本人原创绘制，引用请标注来源，谢谢。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　通过本系列上一篇文章，我们了解了RxJava1中由于被观察者发送事件的速度远快于观察者处理事件的速度导致的背压问题，由此而生出背压策略。虽然RxJava1中有一些操作符支持背压策略，也有一些其他方法，但效果并不太理想。这个问题到了RxJava2中得到了更好地解决。本篇一起来看相较于RxJava1，RxJava2从观察者模式到语法以及线程调度都做了哪些更新。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://LeiHolmes.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava2系列之背压策略(一)</title>
    <link href="http://LeiHolmes.github.io/2017/10/29/RxJava2%E7%B3%BB%E5%88%97%E4%B9%8B%E8%83%8C%E5%8E%8B%E7%AD%96%E7%95%A5(%E4%B8%80)/"/>
    <id>http://LeiHolmes.github.io/2017/10/29/RxJava2系列之背压策略(一)/</id>
    <published>2017-10-28T16:00:00.000Z</published>
    <updated>2017-11-06T08:57:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　通过前7篇RxJava的文章，我们对RxJava1.x版本的内容进行了学习与实践。目前RxJava已经更新到2.x了，有小伙伴问我为什么不直接上RxJava2的教程？RxJava2是在1的基础上进行了更新与优化，有很多相通之处，初学者的话建议还是先从RxJava1的基础理论一步步学习。<br>　　本系列主要通过与RxJava1比较来学习RxJava2都有哪些改变。而RxJava2中最大的优化之处就在于它解决了RxJava1中未能有效解决的背压(Backpressure)问题。本篇我们就来看看什么是背压，以及RxJava1中是如何解决这个问题。<br>　　<a id="more"></a></p>
<h3 id="背压问题"><a href="#背压问题" class="headerlink" title="背压问题"></a>背压问题</h3><p>　　先来个定义：<strong>背压问题是指在RxJava观察者模式的异步场景中，由于被观察者生产事件的速度远远快于观察者消费事件的速度，从而导致生产的事件堆积，最后致使内存溢出，程序崩溃</strong>。<br>　　再上个场景：工厂生产面包，消费者吃面包。工厂生产面包速度慢了，消费者处于等待状态，来一个吃一个，这没什么影响。而如果工厂生产面包的速度过快，导致消费者来不及吃，面包就会累积的越来越多，最后就会过期浪费。<br>　　来看代码演示这个问题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//被观察者每过1ms发射一个事件</span></div><div class="line">Observable.interval(<span class="number">1</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe((aLong) -&gt; &#123;</div><div class="line">            <span class="comment">//观察者每过800ms处理一个事件</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">800</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Log.e(<span class="string">"rx_test"</span>, <span class="string">"back_pressure："</span> + aLong);</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　以上代码中被观察者发射事件的速度是观察者处理速度的800倍，执行后就会抛出<code>Caused by: rx.exceptions.MissingBackpressureException</code>的异常。背压问题的出现需要两个条件：</p>
<ul>
<li>观察者与被观察者需处于不同线程。</li>
<li>被观察者产生事件的速度需远快与观察者消费事件的速度。</li>
</ul>
<p>　　由于观察者与被观察者处于不同线程，所以RxJava内部使用队列来存储事件，Android中默认队列缓存buffersize为16，所以当事件累计超过16个时就会抛出MissingBackpressureException的异常。解决这种问题就需要对被观察者进行流速控制了，而<strong>背压正是应对这种问题的一种策略</strong>。</p>
<h3 id="背压策略"><a href="#背压策略" class="headerlink" title="背压策略"></a>背压策略</h3><p>　　背压策略的解决思路便是响应式拉取。与RxJava观察者模型相反，<strong>响应式拉取是观察者主动去被观察者那里拉取事件，而被观察者则是被动等待通知再发射事件。</strong><br>　　观察者需要多少事件就从被观察者那里拉取，而不是被动接收。这样实际上就实现了控制被观察者的流速，达到了背压策略的目的。<br>　　自绘结构图：  </p>
<p><div align="center"><br>　　<img src="/img/RxJava/backPressure.png" alt=""><br></div><br>　　再来看一下代码示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//range操作符支持背压策略，发送事件的速度可被控制</span></div><div class="line">Observable.range(<span class="number">1</span>, <span class="number">10000</span>)</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//一定要在onStart中通知被观察者先发送一个事件</span></div><div class="line">                request(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"reactivePull：onCompleted"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"reactivePull：onError："</span> + e.getMessage());</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer n)</span> </span>&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>);</div><div class="line">                    Log.e(<span class="string">"rx_test"</span>, <span class="string">"reactivePull：onNext："</span> + n);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                <span class="comment">//处理完毕之后，再通知被观察者发送下一个事件</span></div><div class="line">                request(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　上述代码示例中，被观察者使用了range操作符发射10000次从1开始自增的数字，在观察者中首先于onStart()中使用request(1)向被观察者请求了第一个事件，之后在onNext()中每延时1000ms后输出日志，处理完事件后再调用request(1)请求一个新的事件。<br>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">reactivePull：onNext：<span class="number">1</span></div><div class="line">...<span class="number">1</span>s后...</div><div class="line">reactivePull：onNext：<span class="number">2</span></div><div class="line">...<span class="number">1</span>s后...</div><div class="line">reactivePull：onNext：<span class="number">3</span></div><div class="line">...<span class="number">1</span>s后...</div><div class="line">reactivePull：onNext：<span class="number">4</span></div><div class="line">...<span class="number">1</span>s后...</div><div class="line">reactivePull：onNext：<span class="number">5</span></div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>　　由输出结果可看出，每过1秒输出了一个数字，是不是实现了背压限流策略呢？需要多少事件就在观察者中使用request(n)主动拉取。不过RxJava1.x版本中并不是所有操作符都支持request(n)的响应式拉取，例如第一个例子中的interval操作符就不支持背压策略。而这个问题到了RxJava2.x中就得到了完美解决，且看下一篇。</p>
<h3 id="其他解决方法"><a href="#其他解决方法" class="headerlink" title="其他解决方法"></a>其他解决方法</h3><p>　　RxJava1中不支持背压策略的操作符如何解决背压问题呢？</p>
<h4 id="过滤限流"><a href="#过滤限流" class="headerlink" title="过滤限流"></a>过滤限流</h4><p>　　通过使用限流操作符将被观察者产生的大部分事件过滤抛弃掉来达到限流的目的，间接降低事件发射的速度。  </p>
<ul>
<li><strong>sample</strong>：在一段时间内,只处理最后一个数据</li>
<li><strong>throttleFirst</strong>：在一段时间内,只处理第一个数据</li>
<li><strong>debounce</strong>：发送一个数据,开始计时,到了规定时间内,若没有再发送数据,则开始处理数据,反之重新开始计时。</li>
</ul>
<p>　　这里以sample操作符为例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用sample过滤操作符，每隔300ms取里时间点最近的事件发送</span></div><div class="line">Observable.interval(<span class="number">1</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .sample(<span class="number">300</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .subscribe((aLong) -&gt; Log.e(<span class="string">"rx_test"</span>, <span class="string">"controlByFilter：sample："</span> + aLong));</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">controlByFilter：sample：<span class="number">280</span></div><div class="line">controlByFilter：sample：<span class="number">577</span></div><div class="line">controlByFilter：sample：<span class="number">878</span></div><div class="line">controlByFilter：sample：<span class="number">1178</span></div><div class="line">controlByFilter：sample：<span class="number">1478</span></div><div class="line">controlByFilter：sample：<span class="number">1779</span></div><div class="line">controlByFilter：sample：<span class="number">2078</span></div><div class="line">controlByFilter：sample：<span class="number">2378</span></div><div class="line">controlByFilter：sample：<span class="number">2673</span></div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>　　这种方式虽然实现了限流，但却是以抛弃大部分事件为代价的，在实际场景中并不可取，大家了解就好。</p>
<h4 id="打包缓存"><a href="#打包缓存" class="headerlink" title="打包缓存"></a>打包缓存</h4><p>　　在被观察者发射事件过快，观察者来不及处理的情况下，可以使用缓存类的操作符将其中一部分打包缓存起来，再一点一点的处理其中的事件。</p>
<ul>
<li><strong>buffer</strong>：将多个事件打包放入一个List中，再一起发射。</li>
<li><strong>window</strong>：将多个事件打包放入一个Observable中，再一起发射。</li>
</ul>
<p>　　这里以buffer操作符为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用buffer过滤操作符，将100ms内的事件打包为list发送</span></div><div class="line">Observable.interval(<span class="number">1</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .buffer(<span class="number">100</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .subscribe((longs) -&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">            Log.e(<span class="string">"rx_test"</span>, <span class="string">"controlByCache：buffer："</span> + longs.size());</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">controlByCache：buffer：<span class="number">79</span></div><div class="line">controlByCache：buffer：<span class="number">1001</span></div><div class="line">controlByCache：buffer：<span class="number">1002</span></div><div class="line">controlByCache：buffer：<span class="number">1000</span></div><div class="line">controlByCache：buffer：<span class="number">1001</span></div><div class="line">controlByCache：buffer：<span class="number">1001</span></div><div class="line">controlByCache：buffer：<span class="number">1001</span></div><div class="line">controlByCache：buffer：<span class="number">1001</span></div><div class="line">controlByCache：buffer：<span class="number">1001</span></div><div class="line">controlByCache：buffer：<span class="number">1000</span></div><div class="line">controlByCache：buffer：<span class="number">1002</span></div><div class="line">controlByCache：buffer：<span class="number">1001</span></div></pre></td></tr></table></figure></p>
<h4 id="背压操作符"><a href="#背压操作符" class="headerlink" title="背压操作符"></a>背压操作符</h4><p>　　RxJava1.x中，还有两种效果优于以上两种的操作符，可使不支持背压策略的操作符支持背压策略。</p>
<ul>
<li><strong>onBackpressureDrop</strong>：将observable发送的事件抛弃掉，直到subscriber再次调用request(n)方法的时候，就发送给它这之后的n个事件。</li>
<li><strong>onBackpressurebuffer</strong>：把observable发送出来的事件做缓存，当request(n)方法被调用的时候，给下层流发送一个item(如果给这个缓存区设置了大小，那么超过了这个大小就会抛出异常)。</li>
</ul>
<p>　　以onBackpressureDrop为例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Observable.interval(<span class="number">1</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .onBackpressureDrop()</div><div class="line">        .observeOn(Schedulers.newThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">super</span>.onStart();</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"controlBySpecialOperator："</span> + <span class="string">"onStart"</span>);</div><div class="line">                request(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"controlBySpecialOperator："</span> + <span class="string">"onCompleted"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"controlBySpecialOperator："</span> + <span class="string">"onError"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"controlBySpecialOperator：onNext："</span> + aLong);</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">500</span>);</div><div class="line">                    request(<span class="number">1</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">controlBySpecialOperator：onStart</div><div class="line">controlBySpecialOperator：onNext：<span class="number">0</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">1</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">2</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">3</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">4</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">5</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">6</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">7</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">8</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">9</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">10</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">11</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">12</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">13</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">14</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">15</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">8014</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">8015</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">8016</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">8017</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">8018</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">8019</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">8020</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">8021</span></div><div class="line">controlBySpecialOperator：onNext：<span class="number">8022</span></div><div class="line">......</div></pre></td></tr></table></figure></p>
<p>　　首先输出了0-15的数据，是因为observeOn操作符内部有一个长度为16的缓存区，它会首先请求16个事件缓存起来再输出。使用onBackpressureDrop可使不支持背压的操作符也可响应观察者的request(n)。<br>　　<strong>注意：需调用<code>.onBackpressureDrop()</code>方法。</strong></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　以上就是本篇关于RxJava1中存在的背压问题，背压策略的使用方法以及其他解决方法的讲解。背压在实际开发中遇到的不多，除非是大量数据，所以各位码友了解一下就好。本篇旨在为引入正式的Rxjava2做一个铺垫，敬请期待下一篇。<br>　　进阶中的码猿一枚，写的不对的地方欢迎大神们留言指正，有什么疑惑或者建议也可以在我Github上RxJavaDemo项目Issues中提出，我会及时回复。<br>　　附上RxJavaDemo的地址：<br>　　<a href="https://github.com/LeiHolmes/RxJavaDemo" target="_blank" rel="external">RxJavaDemo</a>
　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　通过前7篇RxJava的文章，我们对RxJava1.x版本的内容进行了学习与实践。目前RxJava已经更新到2.x了，有小伙伴问我为什么不直接上RxJava2的教程？RxJava2是在1的基础上进行了更新与优化，有很多相通之处，初学者的话建议还是先从RxJava1的基础理论一步步学习。&lt;br&gt;　　本系列主要通过与RxJava1比较来学习RxJava2都有哪些改变。而RxJava2中最大的优化之处就在于它解决了RxJava1中未能有效解决的背压(Backpressure)问题。本篇我们就来看看什么是背压，以及RxJava1中是如何解决这个问题。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://LeiHolmes.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava终章之实践出真知(七)</title>
    <link href="http://LeiHolmes.github.io/2017/10/20/RxJava%E7%BB%88%E7%AB%A0%E4%B9%8B%E5%AE%9E%E8%B7%B5%E5%87%BA%E7%9C%9F%E7%9F%A5(%E4%B8%83)/"/>
    <id>http://LeiHolmes.github.io/2017/10/20/RxJava终章之实践出真知(七)/</id>
    <published>2017-10-19T16:00:00.000Z</published>
    <updated>2017-10-24T05:16:12.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　到本阶段，相信各位码友对RxJava的原理及操作符的使用方法已经基本掌握了。只是了解理论知识对于咱们程序猴来说当然远远不够，理论运用到实践才能出真知。一起来律动指尖到实际场景中看看怎么运用RxJava。本篇我们演示一下如何运用RxJava从手机中获取已安装的第三方应用并通过RecyclerView展示出来。<br>　　<a id="more"></a></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="项目下build-gradle"><a href="#项目下build-gradle" class="headerlink" title="项目下build.gradle"></a>项目下build.gradle</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ......</div><div class="line">    dependencies &#123;</div><div class="line">        classpath 'com.android.tools.build:gradle:2.3.2'</div><div class="line">        //ButterKnife支持</div><div class="line">        classpath 'com.jakewharton:butterknife-gradle-plugin:8.7.0'</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">......</div></pre></td></tr></table></figure>
<h4 id="app下build-gradle"><a href="#app下build-gradle" class="headerlink" title="app下build.gradle"></a>app下build.gradle</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">apply plugin: 'com.android.application'</div><div class="line">apply plugin: 'com.jakewharton.butterknife'</div><div class="line"></div><div class="line">android &#123;</div><div class="line">    ......</div><div class="line">    defaultConfig &#123;</div><div class="line">        ......</div><div class="line">        //Lambda支持</div><div class="line">        jackOptions &#123;</div><div class="line">            enabled true</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    //Lambda支持</div><div class="line">    compileOptions &#123;</div><div class="line">        sourceCompatibility JavaVersion.VERSION_1_8</div><div class="line">        targetCompatibility JavaVersion.VERSION_1_8</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ......</div><div class="line">    //RxJava支持</div><div class="line">    compile 'io.reactivex:rxjava:1.0.14'</div><div class="line">    compile 'io.reactivex:rxandroid:1.0.1'</div><div class="line">    //RecyclerView支持</div><div class="line">    compile 'com.android.support:recyclerview-v7:25.3.1'</div><div class="line">    //ButterKnife支持</div><div class="line">    compile 'com.jakewharton:butterknife:8.7.0'</div><div class="line">    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h3><h4 id="主布局"><a href="#主布局" class="headerlink" title="主布局"></a>主布局</h4><p>　　主布局没啥好说的，就是一个RecyclerView。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">tools:context</span>=<span class="string">"com.holmeslei.rxjavademo.ui.PracticeActivity&gt;</span></div><div class="line">    </div><div class="line">    &lt;android.support.v7.widget.RecyclerView</div><div class="line">        android:id="@+<span class="attr">id</span>/<span class="attr">rv_app_list</span>"</div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="RecyclerView的Item布局"><a href="#RecyclerView的Item布局" class="headerlink" title="RecyclerView的Item布局"></a>RecyclerView的Item布局</h4><p>　　RecyclerView单个条目布局，我们需要一个ImageView及一个TextView用来展示每个应用的图标及名称。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">RelativeLayout</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"80dp"</span></div><div class="line">        <span class="attr">android:paddingLeft</span>=<span class="string">"20dp"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/item_iv_head"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"50dp"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></div><div class="line">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:scaleType</span>=<span class="string">"fitXY"</span></div><div class="line">            <span class="attr">android:src</span>=<span class="string">"@mipmap/ic_launcher"</span> /&gt;</div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">            <span class="attr">android:id</span>=<span class="string">"@+id/item_iv_app_name"</span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_centerVertical</span>=<span class="string">"true"</span></div><div class="line">            <span class="attr">android:layout_marginLeft</span>=<span class="string">"30dp"</span></div><div class="line">            <span class="attr">android:layout_toRightOf</span>=<span class="string">"@+id/item_iv_head"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"微信"</span></div><div class="line">            <span class="attr">android:textColor</span>=<span class="string">"#555555"</span></div><div class="line">            <span class="attr">android:textSize</span>=<span class="string">"18sp"</span> /&gt;</div><div class="line">    <span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><h4 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppInfo</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String appName; <span class="comment">//应用名称</span></div><div class="line">    <span class="keyword">private</span> Drawable appIcon; <span class="comment">//应用图标</span></div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> appName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppName</span><span class="params">(String appName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.appName = appName;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> Drawable <span class="title">getAppIcon</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> appIcon;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppIcon</span><span class="params">(Drawable appIcon)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.appIcon = appIcon;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"AppInfo&#123;"</span> +</div><div class="line">                <span class="string">"appName='"</span> + appName + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", appIcon="</span> + appIcon +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="RecyclerView适配器"><a href="#RecyclerView适配器" class="headerlink" title="RecyclerView适配器"></a>RecyclerView适配器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppInfoListAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">AppInfoListAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> List&lt;AppInfo&gt; appInfoList;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppInfoListAdapter</span><span class="params">(Context context, List&lt;AppInfo&gt; appInfoList)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        <span class="keyword">this</span>.appInfoList = appInfoList;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        View view = LayoutInflater.from(context).inflate(R.layout.item_app_list, parent, <span class="keyword">false</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyViewHolder(view);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="comment">//设置应用图标</span></div><div class="line">        holder.ivHead.setImageDrawable(appInfoList.get(position).getAppIcon());</div><div class="line">        <span class="comment">//设置应用名称</span></div><div class="line">        holder.tvAppName.setText(appInfoList.get(position).getAppName());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> appInfoList.size();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        <span class="meta">@BindView</span>(R.id.item_iv_head)</div><div class="line">        ImageView ivHead;</div><div class="line">        <span class="meta">@BindView</span>(R.id.item_iv_app_name)</div><div class="line">        TextView tvAppName;</div><div class="line">        </div><div class="line">        MyViewHolder(View itemView) &#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            ButterKnife.bind(<span class="keyword">this</span>, itemView);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h4><p>　　核心来了，我们重点看initData()方法。分析一下需求，要获取手机中已安装的第三方应用并展示出来，主要分以下几步：</p>
<p>　　1. 从系统中获取所有应用列表数据的集合<code>List&lt;ApplicationInfo&gt;</code>。<br>　　2. 这个集合是已安装的所有应用集合，我们只需要其中的第三方应用，所以要使用到RxJava的filter操作符进行过滤。<br>　　3. 由于ApplicationInfo不满足我们的需求，需要将其转换为我们自定义的实体类AppInfo，所以要使用到RxJava的map操作符进行转换。<br>　　4. 由于获取应用集合，过滤，转换的过程可能是耗时的，我们需要指定Observable运行在io线程。<br>　　5. 由于获取到满足条件的数据后我们还需刷新UI进行展示，所以还需要指定Observer运行在Android的UI线程。<br>　　6. 最后还需要输出错误日志，及完成之后的刷新UI，所以需要重写RxJava错误状态及完成状态的回调方法。<br>　　了解的整个实现流程，接下来上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PracticeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="meta">@BindView</span>(R.id.rv_app_list)</div><div class="line">    RecyclerView rvAppList;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> AppInfoListAdapter adapter;</div><div class="line">    <span class="keyword">private</span> List&lt;AppInfo&gt; appInfoList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_practice);</div><div class="line">        ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line">        initRecyclerView();</div><div class="line">        initData();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化RecyclerView</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initRecyclerView</span><span class="params">()</span> </span>&#123;</div><div class="line">        LinearLayoutManager manager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">        rvAppList.setLayoutManager(manager);</div><div class="line">        adapter = <span class="keyword">new</span> AppInfoListAdapter(<span class="keyword">this</span>, appInfoList);</div><div class="line">        rvAppList.setAdapter(adapter);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化数据</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> PackageManager pm = getPackageManager();</div><div class="line">        <span class="comment">//获取所有应用信息集合</span></div><div class="line">        List&lt;ApplicationInfo&gt; infoList = pm.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES);</div><div class="line">        Observable.from(infoList)</div><div class="line">        <span class="comment">//过滤出已安装的第三方应用</span></div><div class="line">        .filter(<span class="keyword">new</span> Func1&lt;ApplicationInfo, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(ApplicationInfo applicationInfo)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> (applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) &lt;= <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">//转换为自定义的AppInfo类</span></div><div class="line">        .map(<span class="keyword">new</span> Func1&lt;ApplicationInfo, AppInfo&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> AppInfo <span class="title">call</span><span class="params">(ApplicationInfo applicationInfo)</span> </span>&#123;</div><div class="line">                AppInfo appInfo = <span class="keyword">new</span> AppInfo();</div><div class="line">                appInfo.setAppIcon(applicationInfo.loadIcon(pm));</div><div class="line">                appInfo.setAppName(applicationInfo.loadLabel(pm).toString());</div><div class="line">                <span class="keyword">return</span> appInfo;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        <span class="comment">//Observable被观察者执行在io线程</span></div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        <span class="comment">//Observer观察者执行在AndroidUI线程</span></div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;AppInfo&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="comment">//更新列表UI</span></div><div class="line">                adapter.notifyDataSetChanged();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                <span class="comment">//显示错误信息</span></div><div class="line">                Toast.makeText(PracticeActivity.<span class="keyword">this</span>, e.getMessage(), </div><div class="line">                        Toast.LENGTH_LONG).show();</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(AppInfo appInfo)</span> </span>&#123;</div><div class="line">                <span class="comment">//添加第三方应用数据到集合</span></div><div class="line">                appInfoList.add(appInfo);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Lambda简化"><a href="#Lambda简化" class="headerlink" title="Lambda简化"></a>Lambda简化</h4><p>　　还记得我在RxJava系列第一篇中提到过吗？RxJava可结合Lambda表达式达到简化代码的作用，来看一下简化之后的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 初始化数据</div><div class="line"> */</div><div class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> PackageManager pm = getPackageManager();</div><div class="line">    List&lt;ApplicationInfo&gt; infoList = pm.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES);</div><div class="line">    Observable.from(infoList)</div><div class="line">            .filter(applicationInfo -&gt; (applicationInfo.flags &amp; ApplicationInfo.FLAG_SYSTEM) &lt;= <span class="number">0</span>)</div><div class="line">            .map(applicationInfo -&gt; &#123;</div><div class="line">                AppInfo appInfo = <span class="keyword">new</span> AppInfo();</div><div class="line">                appInfo.setAppIcon(applicationInfo.loadIcon(pm));</div><div class="line">                appInfo.setAppName(applicationInfo.loadLabel(pm).toString());</div><div class="line">                <span class="keyword">return</span> appInfo;</div><div class="line">            &#125;)</div><div class="line">            .subscribeOn(Schedulers.io())</div><div class="line">            .observeOn(AndroidSchedulers.mainThread())</div><div class="line">            .subscribe(</div><div class="line">                    appInfo -&gt; appInfoList.add(appInfo),</div><div class="line">                    throwable -&gt; Toast.makeText(PracticeActivity.<span class="keyword">this</span>, throwable.getMessage(), Toast.LENGTH_LONG).show(),</div><div class="line">                    () -&gt; adapter.notifyDataSetChanged()</div><div class="line">            );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　是不是看起来清爽简洁呢？不太了解Lambda表达式的码友可跳转到我的另一篇讲解Lambda表达式的文章：<br>　　<a href="http://xulei.tech/2017/07/24/Lambda表达式基本语法与应用/" target="_blank" rel="external">Lambda表达式基本语法与应用</a></p>
<h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p><div align="center"><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://upload-images.jianshu.io/upload_images/8575775-8606d717e3eb7ef7.gif?imageMogr2/auto-orient/strip" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></div></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　到此，RxJava系列从理论到运用再到实践，整个过程我们通过了7篇文章来学习。然而RxJava的知识远远不止这些，这就需要各位码友去探索发掘了。本系列只是达到入门RxJava的程度，且是基于RxJava1.0版本进行讲解的。目前RxJava已经更新到了2.0+，与1.0版本也有不小的改动与优化的地方。后期我会专门对RxJava2.x有何改动开一篇文章进行讲解，敬请期待。<br>　　技术渣一枚，有写的不对的地方欢迎大神们留言指正，有什么疑惑或者建议也可以在我Github上RxJavaDemo项目Issues中提出，我会及时回复。<br>　　附上RxJavaDemo的地址：<br>　　<a href="https://github.com/LeiHolmes/RxJavaDemo" target="_blank" rel="external">RxJavaDemo</a>
　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　到本阶段，相信各位码友对RxJava的原理及操作符的使用方法已经基本掌握了。只是了解理论知识对于咱们程序猴来说当然远远不够，理论运用到实践才能出真知。一起来律动指尖到实际场景中看看怎么运用RxJava。本篇我们演示一下如何运用RxJava从手机中获取已安装的第三方应用并通过RecyclerView展示出来。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://LeiHolmes.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava操作符之组合操作符(六)</title>
    <link href="http://LeiHolmes.github.io/2017/10/18/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8B%E7%BB%84%E5%90%88%E6%93%8D%E4%BD%9C%E7%AC%A6(%E5%85%AD)/"/>
    <id>http://LeiHolmes.github.io/2017/10/18/RxJava操作符之组合操作符(六)/</id>
    <published>2017-10-17T16:00:00.000Z</published>
    <updated>2017-10-19T07:07:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　上一篇文章我们学习了过滤类操作符，本篇我们将一起来学习RxJava组合类操作符。组合操作符主要是用来同时处理多个Observable，将他们进行组合创建出新的满足我们需求的Observable，一起来看下都有哪些。<br>　　<a id="more"></a></p>
<h3 id="组合操作符"><a href="#组合操作符" class="headerlink" title="组合操作符"></a>组合操作符</h3><h4 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h4><p>　　merge操作符，将两个Observable要发射的观测序列合并为一个序列进行发射。按照两个序列每个元素的发射时间先后进行排序，同一时间点发射的元素则是无序的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将一个发送字母的Observable与发送数字的Observable合并发射</span></div><div class="line"><span class="keyword">final</span> String[] words = <span class="keyword">new</span> String[]&#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>, <span class="string">"I"</span>&#125;;</div><div class="line"><span class="comment">//字母Observable，每200ms发射一次</span></div><div class="line">Observable&lt;String&gt; wordSequence = Observable.interval(<span class="number">200</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .map(<span class="keyword">new</span> Func1&lt;Long, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Long position)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> words[position.intValue()];</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .take(words.length);</div><div class="line"><span class="comment">//数字Observable，每500ms发射一次</span></div><div class="line">Observable&lt;Long&gt; numberSequence = Observable.interval(<span class="number">500</span>, TimeUnit.MILLISECONDS).take(<span class="number">4</span>);</div><div class="line">Observable.merge(wordSequence, numberSequence)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Serializable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Serializable serializable)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"merge："</span> + serializable.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">merge：A</div><div class="line">merge：B</div><div class="line">merge：<span class="number">0</span></div><div class="line">merge：C</div><div class="line">merge：D</div><div class="line">merge：E</div><div class="line">merge：<span class="number">1</span></div><div class="line">merge：F</div><div class="line">merge：G</div><div class="line">merge：<span class="number">2</span></div><div class="line">merge：H</div><div class="line">merge：I</div><div class="line">merge：<span class="number">3</span></div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/merge.png" alt=""><br></div><br>　　merge操作符还有一种入参merge(Observable[]),可传入含有多个Observable的集合，merge操作符也可将这多个Observable的序列合并后发射。</p>
<h4 id="MergeDelayError"><a href="#MergeDelayError" class="headerlink" title="MergeDelayError"></a>MergeDelayError</h4><p>　　mergeDelayError操作符，与merge功能类似，都是用来合并Observable的。不同之处在于mergeDelayError操作符在合并过程中发生异常的话不会立即停止合并，而会在所有元素合并发射完毕之后再发射异常。但发生异常的那个Observable就不会发射数据了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//字母Observable，每200ms发射一次，模拟过程中产生一个异常</span></div><div class="line">Observable&lt;String&gt; wordSequence = Observable.interval(<span class="number">200</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .map(<span class="keyword">new</span> Func1&lt;Long, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Long position)</span> </span>&#123;</div><div class="line">                Long cache = position;</div><div class="line">                <span class="keyword">if</span> (cache == <span class="number">3</span>) &#123;</div><div class="line">                    cache = cache / <span class="number">0</span>;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> words[position.intValue()];</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .take(words.length);</div><div class="line"><span class="comment">//数字Observable，每500ms发射一次</span></div><div class="line">Observable&lt;Long&gt; numberSequence = Observable.interval(<span class="number">500</span>, TimeUnit.MILLISECONDS).take(<span class="number">4</span>);</div><div class="line">Observable.mergeDelayError(wordSequence, numberSequence)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Serializable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Serializable serializable)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"mergeDelayError："</span> + serializable.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"mergeDelayError："</span> + throwable.getMessage());</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> Action0() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"mergeDelayError：onComplete"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mergeDelayError：A</div><div class="line">mergeDelayError：B</div><div class="line">mergeDelayError：<span class="number">0</span></div><div class="line">mergeDelayError：C</div><div class="line">mergeDelayError：<span class="number">1</span></div><div class="line">mergeDelayError：<span class="number">2</span></div><div class="line">mergeDelayError：<span class="number">3</span></div><div class="line">mergeDelayError：divide by zero</div></pre></td></tr></table></figure></p>
<p>　　由输出结果可看出，wordSequence在发射到C时抛出了一个异常，停止发射其剩下的数据，但合并没有停止。合并完成之后这个异常才被发射了出来。<br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/mergeDelayError.png" alt=""><br></div></p>
<h4 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h4><p>　　concat操作符，将多个Obserbavle发射的数据进行合并后发射，类似于merge操作符。但concat操作符是将Observable依次发射，是有序的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; wordSequence = Observable.just(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>);</div><div class="line">Observable&lt;Integer&gt; numberSequence = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</div><div class="line">Observable&lt;String&gt; nameSequence = Observable.just(<span class="string">"Sherlock"</span>, <span class="string">"Holmes"</span>, <span class="string">"Xu"</span>, <span class="string">"Lei"</span>);</div><div class="line">Observable.concat(wordSequence, numberSequence, nameSequence)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Serializable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Serializable serializable)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"concat："</span> + serializable.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">concat：A</div><div class="line">concat：B</div><div class="line">concat：C</div><div class="line">concat：D</div><div class="line">concat：E</div><div class="line">concat：<span class="number">1</span></div><div class="line">concat：<span class="number">2</span></div><div class="line">concat：<span class="number">3</span></div><div class="line">concat：<span class="number">4</span></div><div class="line">concat：<span class="number">5</span></div><div class="line">concat：Sherlo</div><div class="line">concat：Holmes</div><div class="line">concat：Xu</div><div class="line">concat：Lei</div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/concat.png" alt=""><br></div></p>
<h4 id="Zip"><a href="#Zip" class="headerlink" title="Zip"></a>Zip</h4><p>　　zip(Observable, Observable, Func2)操作符，根据Func2中的call()方法规则合并两个Observable的数据项并发射。<br>　　<strong>注意：若其中一个Observable数据发送结束或出现异常后，另一个Observable也会停止发射数据。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; wordSequence = Observable.just(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>);</div><div class="line">Observable&lt;Integer&gt; numberSequence = Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</div><div class="line">Observable.zip(wordSequence, numberSequence, <span class="keyword">new</span> Func2&lt;String, Integer, String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s, Integer integer)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> s + integer;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"zip："</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">zip：A1</div><div class="line">zip：B2</div><div class="line">zip：C3</div><div class="line">zip：D4</div><div class="line">zip：E5</div></pre></td></tr></table></figure></p>
<p>　　由输出结果可看出numberSequence观测序列最后的6并没有发射出来，由于wordSequence观测序列已发射完所有数据，所以组合序列也停止发射数据了。<br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/zip.png" alt=""><br></div></p>
<h4 id="StartWith"><a href="#StartWith" class="headerlink" title="StartWith"></a>StartWith</h4><p>　　startWith操作符，用于在源Observable发射的数据前，插入指定的数据并发射。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</div><div class="line">        .startWith(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"startWith："</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">startWith：<span class="number">1</span></div><div class="line">startWith：<span class="number">2</span></div><div class="line">startWith：<span class="number">3</span></div><div class="line">startWith：<span class="number">4</span></div><div class="line">startWith：<span class="number">5</span></div><div class="line">startWith：<span class="number">6</span></div><div class="line">startWith：<span class="number">7</span></div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/startWith.png" alt=""><br></div><br>　　startWith还有两种入参：  </p>
<ul>
<li>startWith(Iterable<t>)：可在源Observable发射的数据前插入Iterable数据并发射。</t></li>
<li>startWith(Observable<t>)：可在源Observable发射的数据前插入另一Observable发射的数据并发射。</t></li>
</ul>
<h4 id="SwitchOnNext"><a href="#SwitchOnNext" class="headerlink" title="SwitchOnNext"></a>SwitchOnNext</h4><p>　　switchOnNext操作符，用来将一个发射多个小Observable的源Observable转化为一个Observable，然后发射多个小Observable所发射的数据。若小Observable正在发射数据时，源Observable又发射了新的小Observable，则前一个小Observable还未发射的数据会被抛弃，直接发射新的小Observable所发射的数据，上例子。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//每隔500ms产生一个Observable</span></div><div class="line">Observable&lt;Observable&lt;Long&gt;&gt; observable = Observable.interval(<span class="number">500</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .map(<span class="keyword">new</span> Func1&lt;Long, Observable&lt;Long&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                <span class="comment">//每隔200毫秒产生一组数据（0,10,20,30,40)</span></div><div class="line">                <span class="keyword">return</span> Observable.interval(<span class="number">200</span>, TimeUnit.MILLISECONDS)</div><div class="line">                        .map(<span class="keyword">new</span> Func1&lt;Long, Long&gt;() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                                <span class="keyword">return</span> aLong * <span class="number">10</span>;</div><div class="line">                            &#125;</div><div class="line">                        &#125;).take(<span class="number">5</span>);</div><div class="line">                &#125;</div><div class="line">        &#125;).take(<span class="number">2</span>);</div><div class="line">        </div><div class="line">Observable.switchOnNext(observable)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"switchOnNext："</span> + aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">switchOnNext：<span class="number">0</span></div><div class="line">switchOnNext：<span class="number">10</span></div><div class="line">switchOnNext：<span class="number">0</span></div><div class="line">switchOnNext：<span class="number">10</span></div><div class="line">switchOnNext：<span class="number">20</span></div><div class="line">switchOnNext：<span class="number">30</span></div><div class="line">switchOnNext：<span class="number">40</span></div></pre></td></tr></table></figure></p>
<p>　　由输出结果发现第一个小Observable打印到10则停止了发射数据，说明其发射到10时，新的小Observable被创建了出来，第一个小Observable则被中断发射，开始发射新的小Observable的数据。<br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/switchOnNext.png" alt=""><br></div></p>
<h4 id="CombineLatest"><a href="#CombineLatest" class="headerlink" title="CombineLatest"></a>CombineLatest</h4><p>　　combineLatest操作符，用于将两个Observale最近发射的数据以Func2函数的规则进行组合并发射。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引用merge的例子</span></div><div class="line"><span class="keyword">final</span> String[] words = <span class="keyword">new</span> String[]&#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>, <span class="string">"I"</span>&#125;;</div><div class="line">Observable&lt;String&gt; wordSequence = Observable.interval(<span class="number">300</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .map(<span class="keyword">new</span> Func1&lt;Long, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Long position)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> words[position.intValue()];</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .take(words.length);</div><div class="line">Observable&lt;Long&gt; numberSequence = Observable.interval(<span class="number">500</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .take(<span class="number">5</span>);</div><div class="line">Observable.combineLatest(wordSequence, numberSequence,</div><div class="line">        <span class="keyword">new</span> Func2&lt;String, Long, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s, Long aLong)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> s + aLong;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Serializable&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Serializable serializable)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"combineLatest："</span> + serializable.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">combineLatest：A0</div><div class="line">combineLatest：B0</div><div class="line">combineLatest：C0</div><div class="line">combineLatest：C1</div><div class="line">combineLatest：D1</div><div class="line">combineLatest：E1</div><div class="line">combineLatest：E2</div><div class="line">combineLatest：F2</div><div class="line">combineLatest：F3</div><div class="line">combineLatest：G3</div><div class="line">combineLatest：H3</div><div class="line">combineLatest：H4</div><div class="line">combineLatest：I4</div></pre></td></tr></table></figure></p>
<p>　　如果将wordSequence与numberSequence的入参顺序互换，输出结果也会不同：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">combineLatest：<span class="number">0</span>A</div><div class="line">combineLatest：<span class="number">0</span>B</div><div class="line">combineLatest：<span class="number">0</span>C</div><div class="line">combineLatest：<span class="number">1</span>C</div><div class="line">combineLatest：<span class="number">1</span>D</div><div class="line">combineLatest：<span class="number">2</span>D</div><div class="line">combineLatest：<span class="number">2</span>E</div><div class="line">combineLatest：<span class="number">2F</span></div><div class="line">combineLatest：<span class="number">3F</span></div><div class="line">combineLatest：<span class="number">3</span>G</div><div class="line">combineLatest：<span class="number">3</span>H</div><div class="line">combineLatest：<span class="number">4</span>H</div><div class="line">combineLatest：<span class="number">4</span>I</div></pre></td></tr></table></figure></p>
<p>　　wordSequence每300ms发射一个字符，numberSequence每500ms发射一个数字。可能有些码友不知道这个输出结果怎么来的，这个操作符确实不太好理解。我们来看一下这个原理图就很清楚了。<br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/combineLatest.png" alt=""><br></div></p>
<h4 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h4><p>　　join(Observable, Func1, Func1, Func2)操作符，类似于combineLatest操作符，用于将ObservableA与ObservableB发射的数据进行排列组合。但join操作符可以控制Observable发射的每个数据的生命周期，在每个发射数据的生命周期内，可与另一个Observable发射的数据按照一定规则进行合并，来看下join的几个入参。  </p>
<ul>
<li>Observable：需要与源Observable进行组合的目标Observable。</li>
<li>Func1：接收从源Observable发射来的数据，并返回一个Observable，这个Observable的声明周期决定了源Obsrvable发射出来的数据的有效期；</li>
<li>Func1：接收目标Observable发射来的数据，并返回一个Observable，这个Observable的声明周期决定了目标Obsrvable发射出来的数据的有效期；</li>
<li>Func2：接收从源Observable和目标Observable发射出来的数据，并将这两个数据按自定的规则组合后返回。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//产生字母的序列,周期为1000ms</span></div><div class="line">String[] words = <span class="keyword">new</span> String[]&#123;<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>&#125;;</div><div class="line">Observable&lt;String&gt; observableA = Observable.interval(<span class="number">1000</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .map(<span class="keyword">new</span> Func1&lt;Long, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> words[aLong.intValue()];</div><div class="line">            &#125;</div><div class="line">        &#125;).take(<span class="number">8</span>);</div><div class="line"><span class="comment">//产0,1,2,3,4,5,6,7的序列,延时500ms发射,周期为1000ms</span></div><div class="line">Observable&lt;Long&gt; observableB = Observable.interval(<span class="number">500</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .map(<span class="keyword">new</span> Func1&lt;Long, Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> aLong;</div><div class="line">            &#125;</div><div class="line">        &#125;).take(words.length);</div><div class="line"><span class="comment">//join</span></div><div class="line">observableA.join(observableB,</div><div class="line">        <span class="keyword">new</span> Func1&lt;String, Observable&lt;Long&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                <span class="comment">//ObservableA发射的数据有效期为600ms</span></div><div class="line">                <span class="keyword">return</span> Observable.timer(<span class="number">600</span>, TimeUnit.MILLISECONDS);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">new</span> Func1&lt;Long, Observable&lt;Long&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                <span class="comment">//ObservableB发射的数据有效期为600ms</span></div><div class="line">                <span class="keyword">return</span> Observable.timer(<span class="number">600</span>, TimeUnit.MILLISECONDS);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">new</span> Func2&lt;String, Long, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(String s, Long aLong)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> s + aLong;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"join："</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>　　join操作符的组合方式类似于数学上的排列组合规则，以ObservableA为基准源Observable，按照其自身周期发射数据，且每个发射出来的数据都有其有效期。而ObservableB每发射出来一个数据，都与A发射出来的并且还在有效期内的数据按Func2函数中的规则进行组合，B发射出来的数据也有其有效期。最后再将结果发射给观察者进行处理。<br>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">join：A0</div><div class="line">join：A1</div><div class="line">join：B1</div><div class="line">join：B2</div><div class="line">join：C2</div><div class="line">join：C3</div><div class="line">join：D3</div><div class="line">join：D4</div><div class="line">join：E4</div><div class="line">join：E5</div><div class="line">join：F5</div><div class="line">join：F6</div><div class="line">join：G6</div><div class="line">join：G7</div><div class="line">join：H7</div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/join.png" alt=""><br></div></p>
<h4 id="GroupJoin"><a href="#GroupJoin" class="headerlink" title="GroupJoin"></a>GroupJoin</h4><p>　　groupJoin操作符，类似于join操作符，区别在于第四个参数Func2的传入函数不同，对join之后的结果包装了一层小的Observable，便于用户再次进行一些过滤转换等操作再发射给Observable。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">observableA.groupJoin(observableB,</div><div class="line">        <span class="keyword">new</span> Func1&lt;String, Observable&lt;Long&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.timer(<span class="number">600</span>, TimeUnit.MILLISECONDS);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">new</span> Func1&lt;Long, Observable&lt;Long&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;Long&gt; <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.timer(<span class="number">600</span>, TimeUnit.MILLISECONDS);</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">new</span> Func2&lt;String, Observable&lt;Long&gt;, Observable&lt;String&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">(<span class="keyword">final</span> String s, Observable&lt;Long&gt; longObservable)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> longObservable.map(<span class="keyword">new</span> Func1&lt;Long, String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> s + aLong;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Observable&lt;String&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Observable&lt;String&gt; stringObservable)</span> </span>&#123;</div><div class="line">                stringObservable.subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                        Log.e(<span class="string">"rx_test"</span>, <span class="string">"groupJoin："</span> + s);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">groupJoin：A0</div><div class="line">groupJoin：A1</div><div class="line">groupJoin：B1</div><div class="line">groupJoin：B2</div><div class="line">groupJoin：C2</div><div class="line">groupJoin：C3</div><div class="line">groupJoin：D3</div><div class="line">groupJoin：D4</div><div class="line">groupJoin：E4</div><div class="line">groupJoin：E5</div><div class="line">groupJoin：F5</div><div class="line">groupJoin：F6</div><div class="line">groupJoin：G6</div><div class="line">groupJoin：G7</div><div class="line">groupJoin：H7</div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/groupJoin.png" alt=""><br></div></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　到此，本篇关于RxJava的常用组合类操作符就讲解完毕了。通过以上四篇文章对RxJava四类操作符的学习，相信大家已经基本掌握RxJava如何使用了。实践是检验真理的唯一标准，下一篇我们来一起上项目看看实践中如何使用RxJava。<br>　　技术渣一枚，有写的不对的地方欢迎大神们留言指正，有什么疑惑或者建议也可以在我Github上RxJavaDemo项目Issues中提出，我会及时回复。<br>　　附上RxJavaDemo的地址：<br>　　<a href="https://github.com/LeiHolmes/RxJavaDemo" target="_blank" rel="external">RxJavaDemo</a>
　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　上一篇文章我们学习了过滤类操作符，本篇我们将一起来学习RxJava组合类操作符。组合操作符主要是用来同时处理多个Observable，将他们进行组合创建出新的满足我们需求的Observable，一起来看下都有哪些。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://LeiHolmes.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava操作符之过滤操作符(五)</title>
    <link href="http://LeiHolmes.github.io/2017/10/16/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8B%E8%BF%87%E6%BB%A4%E6%93%8D%E4%BD%9C%E7%AC%A6(%E4%BA%94)/"/>
    <id>http://LeiHolmes.github.io/2017/10/16/RxJava操作符之过滤操作符(五)/</id>
    <published>2017-10-15T16:00:00.000Z</published>
    <updated>2017-10-16T06:46:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　上一篇文章我们学习了转换类操作符，本篇我们将一起来学习RxJava过滤类操作符。过滤操作符主要是用来对事件数据进行过滤与筛选，只返回满足条件的数据，一起来看下都有哪些。<br>　　<a id="more"></a></p>
<h3 id="过滤操作符"><a href="#过滤操作符" class="headerlink" title="过滤操作符"></a>过滤操作符</h3><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>　　filter操作符，按照一定的约束条件过滤序列中我们不想要的数据，只返回满足条件的数据给观察者。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//结合flatmap，过滤出各小区中房源大小大于120平的房子</span></div><div class="line">Observable.from(communities)</div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Community, Observable&lt;House&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;House&gt; <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.from(community.getHouses());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .filter(<span class="keyword">new</span> Func1&lt;House, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> house.getSize() &gt; <span class="number">120f</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"filter：大于120平的房子："</span> + house.getCommunityName() + <span class="string">"小区，大小："</span> + house.getSize());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　由代码可见，我们需要new一个Func1对象给filter()，<code>Func1&lt;House, Boolean&gt;()</code>中第一个是由观测序列传入数据的类型，第二个是返回是否过滤的Boolean对象。满足filter()的条件则返回true，否则返回false。并将返回为true的数据发射给观察者。<br>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">filter：大于<span class="number">120</span>平的房子：东方花园小区，大小：<span class="number">144.8</span></div><div class="line">filter：大于<span class="number">120</span>平的房子：东方花园小区，大小：<span class="number">144.8</span></div><div class="line">filter：大于<span class="number">120</span>平的房子：马德里春天小区，大小：<span class="number">123.4</span></div><div class="line">filter：大于<span class="number">120</span>平的房子：马德里春天小区，大小：<span class="number">123.4</span></div><div class="line">filter：大于<span class="number">120</span>平的房子：帝豪家园小区，大小：<span class="number">188.7</span></div><div class="line">filter：大于<span class="number">120</span>平的房子：帝豪家园小区，大小：<span class="number">188.7</span></div><div class="line">filter：大于<span class="number">120</span>平的房子：帝豪家园小区，大小：<span class="number">188.7</span></div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/filter.png" alt=""><br></div><br>　　实际项目开发中，filter操作符可用来过滤数据集合中的null值，方便实用。</p>
<h4 id="Take"><a href="#Take" class="headerlink" title="Take"></a>Take</h4><p>　　take(int count)操作符，可用来截取观测序列中前count个元素并发射。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//take：获取前两个小区名</span></div><div class="line">Observable.from(communities)</div><div class="line">        .take(<span class="number">2</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"take：前两个小区："</span> + community.getCommunityName());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">take：前两个小区：东方花园</div><div class="line">take：前两个小区：马德里春天</div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/take.png" alt=""><br></div></p>
<h4 id="TakeLast"><a href="#TakeLast" class="headerlink" title="TakeLast"></a>TakeLast</h4><p>　　takeLast(int count)操作符，顾名思义，截取观测序列中后count个元素并发射。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//takeLast：获取后两个小区名</span></div><div class="line">Observable.from(communities)</div><div class="line">        .takeLast(<span class="number">2</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"takeLast：后两个小区："</span> + community.getCommunityName());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">takeLast：后两个小区：马德里春天</div><div class="line">takeLast：后两个小区：帝豪家园</div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/takeLast.png" alt=""><br></div></p>
<h4 id="TakeUntil"><a href="#TakeUntil" class="headerlink" title="TakeUntil"></a>TakeUntil</h4><p>　　takeUntil操作符有两种类型的入参。<br>　　<strong>1.takeUntil(Observable)</strong><br>　　订阅并开始发射原始Observable，同时监视我们提供的第二个Observable。如果第二个Observable发射了一项数据或者发射了一个终止通知，takeUntil()返回的Observable会停止发射原始Observable并终止。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//observableA每300ms发射一个Long型自增数据</span></div><div class="line"><span class="comment">//observableB每800ms发射一个Long型自增数据</span></div><div class="line">Observable&lt;Long&gt; observableA = Observable.interval(<span class="number">300</span>, TimeUnit.MILLISECONDS);</div><div class="line">Observable&lt;Long&gt; observableB = Observable.interval(<span class="number">800</span>, TimeUnit.MILLISECONDS);</div><div class="line">observableA.takeUntil(observableB)</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"takeUntil(Observable)："</span> + <span class="string">"onCompleted"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"takeUntil(Observable)：onError："</span> + e.getMessage());</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"takeUntil(Observable)：onNext："</span> + aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">takeUntil(Observable)：onNext：<span class="number">0</span></div><div class="line">takeUntil(Observable)：onNext：<span class="number">1</span></div><div class="line">takeUntil(Observable)：onCompleted</div></pre></td></tr></table></figure></p>
<p>　　由输出结果可看出，订阅之后，observableA依次发射0，1之后就发射onCompleted标记停止了。这是由于observableA每300ms发射一次，当发射完1后，时间已过去600ms，到800ms时observableB开始发射数据，takeUntil起作用则中断了observableA的发射。<br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/takeUntil1.png" alt=""><br></div><br>　　<strong>2.takeUntil(Func1)</strong><br>　　通过传入的Func1中的call()方法判断是否中止发射数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//takeUntil：与flatmap结合过滤直到房价大于500时中断当前小Observable发射House</span></div><div class="line">Observable.from(communities)</div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Community, Observable&lt;House&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;House&gt; <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.from(community.getHouses());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .takeUntil(<span class="keyword">new</span> Func1&lt;House, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> house.getPrice() &gt; <span class="number">500</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"takeUntil：大于500时中断发射："</span> + house.getCommunityName() + <span class="string">"小区，房价："</span> + house.getPrice());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">takeUntil(Func1)：大于<span class="number">500</span>时中断发射：东方花园小区，房价：<span class="number">200</span></div><div class="line">takeUntil(Func1)：大于<span class="number">500</span>时中断发射：东方花园小区，房价：<span class="number">520</span></div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/takeUntil2.png" alt=""><br></div></p>
<h4 id="TakeWhile"><a href="#TakeWhile" class="headerlink" title="TakeWhile"></a>TakeWhile</h4><p>　　takeWhile操作符，类似于takeUntil(Func1)，不过takeWhile()是当Observable发射的数据不满足条件时中止Observable的发射。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//takeWhile：当发射的数据等于3时中止发射</span></div><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .takeWhile(<span class="keyword">new</span> Func1&lt;Integer, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer != <span class="number">3</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"takeWhile："</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">takeWhile：<span class="number">1</span></div><div class="line">takeWhile：<span class="number">2</span></div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/takeWhile.png" alt=""><br></div></p>
<h4 id="Skip"><a href="#Skip" class="headerlink" title="Skip"></a>Skip</h4><p>　　skip(int count)操作符，忽略发射观测序列的前count项数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//忽略前两个小区数据</span></div><div class="line">Observable.from(communities)</div><div class="line">        .skip(<span class="number">2</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"skip：忽略前两个小区："</span> + community.getCommunityName());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">skip：忽略前两个小区：帝豪家园</div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/skip.png" alt=""><br></div></p>
<h4 id="SkipLast"><a href="#SkipLast" class="headerlink" title="SkipLast"></a>SkipLast</h4><p>　　skipLast(int count)操作符，忽略发射观测序列的后count项数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//忽略后两个小区数据</span></div><div class="line">Observable.from(communities)</div><div class="line">        .skipLast(<span class="number">2</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"skip：忽略后两个小区："</span> + community.getCommunityName());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">忽略后两个小区：东方花园</div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/skipLast.png" alt=""><br></div></p>
<h4 id="SkipUntil"><a href="#SkipUntil" class="headerlink" title="SkipUntil"></a>SkipUntil</h4><p>　　skipUntil操作符，与takeUntil()相反。订阅并开始发射原始Observable，同时监视我们提供的第二个Observable。如果第二个Observable发射了一项数据或者发射了一个终止通知，skipUntil()返回的Observable才会开始发射数据，忽略之前的数据项。<br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/skipUntil.png" alt=""><br></div></p>
<h4 id="SkipWhile"><a href="#SkipWhile" class="headerlink" title="SkipWhile"></a>SkipWhile</h4><p>　　skipWhile操作符，与takeWhile相反，当Observable发射的数据不满足条件时才开始发射数据，忽略之前的数据项。<br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/skipWhile.png" alt=""><br></div></p>
<h4 id="Debounce"><a href="#Debounce" class="headerlink" title="Debounce"></a>Debounce</h4><p>　　debounce操作符有两种类型的入参。<br>　　<strong>1.debounce(long, TimeUnit)</strong><br>　　过滤由Observable发射的速率过快的数据，起到限流的作用。第一个参数为限流时间，第二个参数为时间单位。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                subscriber.onNext(i);</div><div class="line">                Thread.sleep(i * <span class="number">100</span>); <span class="comment">//分别延时100，200，300，400，500......900ms发射数据</span></div><div class="line">            &#125;</div><div class="line">            subscriber.onCompleted();</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.newThread())</div><div class="line">        .debounce(<span class="number">400</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .subscribe(<span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"debounce："</span> + <span class="string">"onCompleted"</span>);</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"debounce："</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">debounce：<span class="number">5</span></div><div class="line">debounce：<span class="number">6</span></div><div class="line">debounce：<span class="number">7</span></div><div class="line">debounce：<span class="number">8</span></div><div class="line">debounce：<span class="number">9</span></div><div class="line">debounce：onCompleted</div></pre></td></tr></table></figure></p>
<p>　　由输出结果可以看出由于设定限流时间为500ms，所以1-4并没有被发射而是被过滤了。<br>　　<strong>注意：如果源Observable产生的最后一个结果在限流时间内内调用了onCompleted，那么通过debounce操作符也会把这个结果提交给订阅者。</strong><br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/debounce1.png" alt=""><br></div><br>　　<strong>2.debounce(Func1)</strong><br>　　根据Func1的call方法中的函数来过滤。Func1中的中的call方法返回了一个临时的Observable，如果原始的Observable在发射一个新的数据时，上一个数据根据Func1的call方法生成的临时Observable还没结束，那么上一个数据就会被过滤掉。<br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/debounce2.png" alt=""><br></div></p>
<h4 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h4><p>　　<strong>1.distinct()</strong><br>　　只允许还没有发射过的数据通过，达到去除序列中重复项的作用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//去除重复数字</span></div><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>)</div><div class="line">        .distinct()</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"distinct：去重："</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">distinct：去重：<span class="number">1</span></div><div class="line">distinct：去重：<span class="number">2</span></div><div class="line">distinct：去重：<span class="number">3</span></div><div class="line">distinct：去重：<span class="number">4</span></div><div class="line">distinct：去重：<span class="number">5</span></div><div class="line">distinct：去重：<span class="number">6</span></div><div class="line">distinct：去重：<span class="number">7</span></div></pre></td></tr></table></figure></p>
<p>　　由输出结果可见有重复的2和6都被过滤了。<br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/distinct.png" alt=""><br></div><br>　　<strong>2.distinct(Func1)</strong><br>　　根据Func1中的call方法进行去重，call方法会根据Observable发射的值生成一个Key，然后比较这个key来判断两个数据是否相同，如果判定为重复则会和distinct()一样过滤掉重复的数据项。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据某属性去重，去除各小区大小相同的房源</span></div><div class="line">Observable.from(communities)</div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Community, Observable&lt;House&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;House&gt; <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.from(community.getHouses());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .distinct(<span class="keyword">new</span> Func1&lt;House, Float&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Float <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> house.getSize();</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"distinct(Func1)：去重："</span> + house.getCommunityName() + <span class="string">"小区，大小："</span> + house.getSize());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">distinct(Func1)：去重：东方花园小区，大小：<span class="number">105.6</span></div><div class="line">distinct(Func1)：去重：东方花园小区，大小：<span class="number">144.8</span></div><div class="line">distinct(Func1)：去重：马德里春天小区，大小：<span class="number">88.6</span></div><div class="line">distinct(Func1)：去重：马德里春天小区，大小：<span class="number">123.4</span></div><div class="line">distinct(Func1)：去重：帝豪家园小区，大小：<span class="number">188.7</span></div><div class="line">distinct(Func1)：去重：帝豪家园小区，大小：<span class="number">56.4</span></div></pre></td></tr></table></figure></p>
<h4 id="DistinctUntilChanged"><a href="#DistinctUntilChanged" class="headerlink" title="DistinctUntilChanged"></a>DistinctUntilChanged</h4><p>　　<strong>1.distinctUntilChanged()</strong><br>　　通过当前数据项与前一项是否相同来进行去重。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//向前去重复数据</span></div><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">5</span>)</div><div class="line">        .distinctUntilChanged()</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"distinctUntilChanged：向前去重："</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">distinctUntilChanged：向前去重：<span class="number">1</span></div><div class="line">distinctUntilChanged：向前去重：<span class="number">2</span></div><div class="line">distinctUntilChanged：向前去重：<span class="number">3</span></div><div class="line">distinctUntilChanged：向前去重：<span class="number">4</span></div><div class="line">distinctUntilChanged：向前去重：<span class="number">2</span></div><div class="line">distinctUntilChanged：向前去重：<span class="number">3</span></div><div class="line">distinctUntilChanged：向前去重：<span class="number">5</span></div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/distinctUntilChanged.png" alt=""><br></div><br>　　<strong>2.distinctUntilChanged(Func1)</strong><br>　　与distinct(Func1)类似，根据Func1中call方法产生一个key来判断相邻两个数据项是否相同。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//根据某属性向前去重，去除各小区名相同的房源</span></div><div class="line">Observable.from(communities)</div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Community, Observable&lt;House&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;House&gt; <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.from(community.getHouses())</div><div class="line">                .distinctUntilChanged(<span class="keyword">new</span> Func1&lt;House, String&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                        <span class="keyword">return</span> house.getCommunityName();</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"distinctUntilChanged(Func1)：向前去重："</span> + house.getCommunityName() + <span class="string">"小区，大小："</span> + house.getSize());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">distinctUntilChanged(Func1)：向前去重：东方花园小区，大小：<span class="number">105.6</span></div><div class="line">distinctUntilChanged(Func1)：向前去重：马德里春天小区，大小：<span class="number">88.6</span></div><div class="line">distinctUntilChanged(Func1)：向前去重：帝豪家园小区，大小：<span class="number">188.7</span></div></pre></td></tr></table></figure></p>
<h4 id="ElementAt"><a href="#ElementAt" class="headerlink" title="ElementAt"></a>ElementAt</h4><p>　　elementAt(int index)操作符，获取观测序列中第index项索引，并作为唯一数据发射给观察者，index索引从0开始。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.from(communities)</div><div class="line">        .elementAt(<span class="number">1</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"elementAt：第二个小区："</span> + community.getCommunityName());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">elementAt：第二个小区：马德里春天</div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/elementAt.png" alt=""><br></div></p>
<h4 id="First"><a href="#First" class="headerlink" title="First"></a>First</h4><p>　　<strong>1.first()</strong><br>　　只发射观测序列中的第一个数据项。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable.from(communities)</div><div class="line">        .first()</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"first："</span> + community.getCommunityName());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">first：东方花园</div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/first.png" alt=""><br></div><br>　　<strong>2.first(Func1)</strong><br>　　根据Func1中call方法的条件，发射符合条件的第一个数据项。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//过滤出第一个小区名为马德里春天的小区</span></div><div class="line">Observable.from(communities)</div><div class="line">        .first(<span class="keyword">new</span> Func1&lt;Community, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"马德里春天"</span>.equals(community.getCommunityName());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"first(Func1)："</span> + community.getCommunityName());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">first(Func1)：马德里春天</div></pre></td></tr></table></figure></p>
<h4 id="Last"><a href="#Last" class="headerlink" title="Last"></a>Last</h4><p>　　<strong>1.last()</strong><br>　　只发射观测序列中的最后一个数据项。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//发送最后一个数据项</span></div><div class="line">Observable.from(communities)</div><div class="line">        .last()</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"last："</span> + community.getCommunityName());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">last：帝豪家园</div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/last.png" alt=""><br></div><br>　　<strong>2.last(Func1)</strong><br>　　根据Func1中call方法的条件，发射符合条件的最后一个数据项。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//发送符合条件的最后一个数据项：过滤最后一个小区名为马德里春天的房源</span></div><div class="line">Observable.from(communities)</div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Community, Observable&lt;House&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;House&gt; <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.from(community.getHouses());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .last(<span class="keyword">new</span> Func1&lt;House, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"马德里春天"</span>.equals(house.getCommunityName());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"last："</span> + house.getCommunityName() + <span class="string">"小区，大小："</span> + house.getSize());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">last：马德里春天小区，大小：<span class="number">88.6</span></div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　到此，本篇关于RxJava的常用过滤类操作符就讲解完毕了，下一篇我们将一起研究RxJava的四类操作符中的组合操作符都有哪些以及如何使用。<br>　　技术渣一枚，有写的不对的地方欢迎大神们留言指正，有什么疑惑或者建议也可以在我Github上RxJavaDemo项目Issues中提出，我会及时回复。<br>　　附上RxJavaDemo的地址：<br>　　<a href="https://github.com/LeiHolmes/RxJavaDemo" target="_blank" rel="external">RxJavaDemo</a>
　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　上一篇文章我们学习了转换类操作符，本篇我们将一起来学习RxJava过滤类操作符。过滤操作符主要是用来对事件数据进行过滤与筛选，只返回满足条件的数据，一起来看下都有哪些。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://LeiHolmes.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava操作符之转换操作符(四)</title>
    <link href="http://LeiHolmes.github.io/2017/10/12/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8B%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6(%E5%9B%9B)/"/>
    <id>http://LeiHolmes.github.io/2017/10/12/RxJava操作符之转换操作符(四)/</id>
    <published>2017-10-11T16:00:00.000Z</published>
    <updated>2017-10-16T06:36:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　上一篇文章我们学习了创建类操作符，本篇我们将一起来学习RxJava转换类操作符。所谓转换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。下面来看下转换类操作符都有哪些及其使用场景。<br>　　<a id="more"></a></p>
<h3 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h3><p>　　还是使用系列第一篇的小区与房源的例子。先初始化假数据以便实践操作符时使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//小区实体</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Community</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String communityName; <span class="comment">//小区名称</span></div><div class="line">    <span class="keyword">private</span> List&lt;House&gt; houses; <span class="comment">//房源集合</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//房源实体</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> size; <span class="comment">//大小</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> floor; <span class="comment">//楼层</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price; <span class="comment">//总价</span></div><div class="line">    <span class="keyword">private</span> String decoration; <span class="comment">//装修程度</span></div><div class="line">    <span class="keyword">private</span> String communityName; <span class="comment">//小区名称</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> List&lt;Community&gt; communities;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">    communities = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    List&lt;House&gt; houses1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            houses1.add(<span class="keyword">new</span> House(<span class="number">105.6f</span>, i, <span class="number">200</span>, <span class="string">"简单装修"</span>, <span class="string">"东方花园"</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            houses1.add(<span class="keyword">new</span> House(<span class="number">144.8f</span>, i, <span class="number">520</span>, <span class="string">"豪华装修"</span>, <span class="string">"东方花园"</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    communities.add(<span class="keyword">new</span> Community(<span class="string">"东方花园"</span>, houses1));</div><div class="line">    </div><div class="line">    List&lt;House&gt; houses2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            houses2.add(<span class="keyword">new</span> House(<span class="number">88.6f</span>, i, <span class="number">166</span>, <span class="string">"中等装修"</span>, <span class="string">"马德里春天"</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            houses2.add(<span class="keyword">new</span> House(<span class="number">123.4f</span>, i, <span class="number">321</span>, <span class="string">"精致装修"</span>, <span class="string">"马德里春天"</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    communities.add(<span class="keyword">new</span> Community(<span class="string">"马德里春天"</span>, houses2));</div><div class="line">    </div><div class="line">    List&lt;House&gt; houses3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">            houses3.add(<span class="keyword">new</span> House(<span class="number">188.7f</span>, i, <span class="number">724</span>, <span class="string">"豪华装修"</span>, <span class="string">"帝豪家园"</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            houses3.add(<span class="keyword">new</span> House(<span class="number">56.4f</span>, i, <span class="number">101</span>, <span class="string">"普通装修"</span>, <span class="string">"帝豪家园"</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    communities.add(<span class="keyword">new</span> Community(<span class="string">"帝豪家园"</span>, houses3));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="转换操作符"><a href="#转换操作符" class="headerlink" title="转换操作符"></a>转换操作符</h3><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><p>　　map操作符，接收一个指定的Func1类型对象，然后将其应用到每一个由Observable发射的值上，进而将发射的值转换为我们期望的值。来看一下原理图与实例：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/map.png" alt=""><br></div><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//将一组Integer转换成String</span></div><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .map(<span class="keyword">new</span> Func1&lt;Integer, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"This is "</span> + integer;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, s);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        </div><div class="line"><span class="comment">//将Community集合转换为每一个Community并获取其name</span></div><div class="line">Observable.from(communities)</div><div class="line">        .map(<span class="keyword">new</span> Func1&lt;Community, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> community.getCommunityName();</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String communityName)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"小区名称为："</span> + communityName);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">This is <span class="number">1</span></div><div class="line">This is <span class="number">2</span></div><div class="line">This is <span class="number">3</span></div><div class="line">This is <span class="number">4</span></div><div class="line">This is <span class="number">5</span></div><div class="line">小区名称为：东方花园</div><div class="line">小区名称为：马德里春天</div><div class="line">小区名称为：帝豪家园</div></pre></td></tr></table></figure></p>
<p>　　由输出结果可看出，map操作符可用来进行数据的类型转换，拼接或者对集合进行遍历等1对1的转换。第一个例子中，<code>Func1&lt;Integer, String&gt;()</code>第一个参数是发射数据当前的类型，第二个参数是转换之后的数据类型。<code>Action1&lt;String&gt;</code>中参数也为发射数据转换之后的数据类型。<br>　　<strong>注意数据类型需对应准确，不要弄错了。</strong></p>
<h4 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h4><p>　　flatMap操作符，也是用来转换的，但与map操作符不同之处是，flatMap()返回的是Observable对象，且这个Observable对象并不是被直接发送到了 Subscriber的回调方法中。<br>　　这么说可能不易理解，我们来看小区与房的例子，现在有3个小区，如果我们想打印出这3个小区中所有房源的信息，通过RxJava要如何做到？按照之前学习的我们或许会这么实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Observable.from(communities)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Community&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">for</span> (House house : community.getHouses()) &#123;</div><div class="line">                    Log.e(<span class="string">"rx_test"</span>, <span class="string">"flatMap：小区名称："</span> + house.getCommunityName() </div><div class="line">                        + <span class="string">"，价格："</span> + house.getPrice() + <span class="string">"，楼层："</span> + house.getFloor());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　按照这种实现方法我们只可获取到每个小区这一层，想要获取小区中的房源还需进行一层for循环遍历，这就违背了RxJava的原则了。那么来看下flatMap()如何实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observable.from(communities)</div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Community, Observable&lt;House&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;House&gt; <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.from(community.getHouses());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"flatMap：小区名称："</span> + house.getCommunityName()</div><div class="line">                    + <span class="string">"，价格："</span> + house.getPrice() + <span class="string">"，楼层："</span> + house.getFloor());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　这样的代码是不是看起来舒心多了，再来看下flatMap()是如何实现的。<br>　　首先from()接收到小区集合communities后为其创建了一个Observable，依次将每个小区传递给flatMap()，flatMap()在每次接收到小区后会将其中包含的房源集合拿出来又创建了一个房源Observable，并激活这个房源Observable让其开始发射事件，之后返回给小区集合的Observable，最后小区集合的Observable再将这些事件统一交给Subscriber的回调方法去处理。<br>　　整个过程有两级Observable在运作，相当于将小区集合Observable这个初始对象<strong>铺平</strong>之后再通过统一路径分发下去，<strong>铺平</strong>这个工作就是flatMap所做的。<br>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">flatMap：小区名称：东方花园，价格：<span class="number">200</span>，楼层：<span class="number">0</span></div><div class="line">flatMap：小区名称：东方花园，价格：<span class="number">520</span>，楼层：<span class="number">1</span></div><div class="line">flatMap：小区名称：东方花园，价格：<span class="number">200</span>，楼层：<span class="number">2</span></div><div class="line">flatMap：小区名称：东方花园，价格：<span class="number">520</span>，楼层：<span class="number">3</span></div><div class="line">flatMap：小区名称：东方花园，价格：<span class="number">200</span>，楼层：<span class="number">4</span></div><div class="line">flatMap：小区名称：马德里春天，价格：<span class="number">166</span>，楼层：<span class="number">0</span></div><div class="line">flatMap：小区名称：马德里春天，价格：<span class="number">321</span>，楼层：<span class="number">1</span></div><div class="line">flatMap：小区名称：马德里春天，价格：<span class="number">166</span>，楼层：<span class="number">2</span></div><div class="line">flatMap：小区名称：马德里春天，价格：<span class="number">321</span>，楼层：<span class="number">3</span></div><div class="line">flatMap：小区名称：马德里春天，价格：<span class="number">166</span>，楼层：<span class="number">4</span></div><div class="line">flatMap：小区名称：帝豪家园，价格：<span class="number">724</span>，楼层：<span class="number">0</span></div><div class="line">flatMap：小区名称：帝豪家园，价格：<span class="number">101</span>，楼层：<span class="number">1</span></div><div class="line">flatMap：小区名称：帝豪家园，价格：<span class="number">724</span>，楼层：<span class="number">2</span></div><div class="line">flatMap：小区名称：帝豪家园，价格：<span class="number">101</span>，楼层：<span class="number">3</span></div><div class="line">flatMap：小区名称：帝豪家园，价格：<span class="number">724</span>，楼层：<span class="number">4</span></div></pre></td></tr></table></figure></p>
<p>　　由输出结果可看出这3个小区的所有房源信息都被依次打印了出来，但flatMap()有一个问题就是当数据量过大时可能会出现输出数据顺序交错的问题。<br>　　官方原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/flatMap.png" alt=""><br></div></p>
<h4 id="ConcatMap"><a href="#ConcatMap" class="headerlink" title="ConcatMap"></a>ConcatMap</h4><p>　　concatMap操作符，与flatMap()功能类似。不同之处是concatMap()采用连接方式而不是合并方式，所以其发射的数据是严格按照顺序的，这就解决了flatMap()有可能发生数据交错的问题。<br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/concatMap.png" alt=""><br></div></p>
<h4 id="FlatMapIterable"><a href="#FlatMapIterable" class="headerlink" title="FlatMapIterable"></a>FlatMapIterable</h4><p>　　flatMapIterable操作符，也与flatMap()相似，不同之处在于flatMapIterable转化多个Observable是使用Iterable作为源数据的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.from(communities)</div><div class="line">        .flatMapIterable(<span class="keyword">new</span> Func1&lt;Community, Iterable&lt;House&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Iterable&lt;House&gt; <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> community.getHouses();</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"flatMap：小区名称："</span> + house.getCommunityName()</div><div class="line">                    + <span class="string">"，价格："</span> + house.getPrice() + <span class="string">"，楼层："</span> + house.getFloor());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="SwitchMap"><a href="#SwitchMap" class="headerlink" title="SwitchMap"></a>SwitchMap</h4><p>　　switchMap转换操作符，也与flatMap()相似，每当源Observable发射新数据项(Observable)时，它将取消订阅并停止监视之前那个数据项产生Observable，并开始监视当前发射的这一个。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observable.from(communities)</div><div class="line">        .switchMap(<span class="keyword">new</span> Func1&lt;Community, Observable&lt;House&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;House&gt; <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.from(community.getHouses());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"flatMap：小区名称："</span> + house.getCommunityName()</div><div class="line">                    + <span class="string">"，价格："</span> + house.getPrice() + <span class="string">"，楼层："</span> + house.getFloor());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　如之前的例子，当数据量很大时，某一时刻，第一个小区所生成的小房源Observable正在发射数据，这时第二个小区所生成的小房源Observable被激活，则第一个小区的小Observable就会被取消订阅，其还未发射的数据也不在发射了。第二个小区小Observable开始发射数据，之后都同理。<br>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/switchMap.png" alt=""><br></div></p>
<h4 id="Scan"><a href="#Scan" class="headerlink" title="Scan"></a>Scan</h4><p>　　scan操作符，对一个序列的数据应用一个函数，并将这个函数的结果发射出去作为下个数据应用函数时的第一个参数使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//例如：先输出1，再将1+2=3作为下个数据发出，3+3=6再作为下个数据发出，以此类推。</span></div><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .scan(<span class="keyword">new</span> Func2&lt;Integer, Integer, Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">(Integer integer, Integer integer2)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> integer + integer2;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"scan："</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">scan：<span class="number">1</span></div><div class="line">scan：<span class="number">3</span></div><div class="line">scan：<span class="number">6</span></div><div class="line">scan：<span class="number">10</span></div><div class="line">scan：<span class="number">15</span></div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/scan.png" alt=""><br></div></p>
<h4 id="GroupBy"><a href="#GroupBy" class="headerlink" title="GroupBy"></a>GroupBy</h4><p>　　groupBy操作符，将原始Observable发射的数据按照key来拆分成一些小的Observable，然后这些小的Observable分别发射其所包含的的数据。通俗的说就是按照某个字段将数据进行分类再发射。<br>　　来看一个例子：有几个小区的多套房源数据，现在需要将其按照小区名称进行分类并输出。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">List&lt;House&gt; houseList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">houseList.add(<span class="keyword">new</span> House(<span class="number">105.6f</span>, <span class="number">1</span>, <span class="number">200</span>, <span class="string">"简单装修"</span>, <span class="string">"东方花园"</span>));</div><div class="line">houseList.add(<span class="keyword">new</span> House(<span class="number">144.8f</span>, <span class="number">3</span>, <span class="number">300</span>, <span class="string">"豪华装修"</span>, <span class="string">"马德里春天"</span>));</div><div class="line">houseList.add(<span class="keyword">new</span> House(<span class="number">88.6f</span>, <span class="number">2</span>, <span class="number">170</span>, <span class="string">"简单装修"</span>, <span class="string">"东方花园"</span>));</div><div class="line">houseList.add(<span class="keyword">new</span> House(<span class="number">123.4f</span>, <span class="number">1</span>, <span class="number">250</span>, <span class="string">"简单装修"</span>, <span class="string">"帝豪家园"</span>));</div><div class="line">houseList.add(<span class="keyword">new</span> House(<span class="number">144.8f</span>, <span class="number">6</span>, <span class="number">350</span>, <span class="string">"豪华装修"</span>, <span class="string">"马德里春天"</span>));</div><div class="line">houseList.add(<span class="keyword">new</span> House(<span class="number">105.6f</span>, <span class="number">4</span>, <span class="number">210</span>, <span class="string">"普通装修"</span>, <span class="string">"东方花园"</span>));</div><div class="line">houseList.add(<span class="keyword">new</span> House(<span class="number">188.7f</span>, <span class="number">3</span>, <span class="number">400</span>, <span class="string">"精致装修"</span>, <span class="string">"帝豪家园"</span>));</div><div class="line">houseList.add(<span class="keyword">new</span> House(<span class="number">88.6f</span>, <span class="number">2</span>, <span class="number">180</span>, <span class="string">"普通装修"</span>, <span class="string">"东方花园"</span>));</div><div class="line"><span class="comment">//根据小区名称进行分类</span></div><div class="line">Observable&lt;GroupedObservable&lt;String, House&gt;&gt; groupByCommunityNameObservable = Observable</div><div class="line">        .from(houseList)</div><div class="line">        .groupBy(<span class="keyword">new</span> Func1&lt;House, String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="comment">//提供分类规则的key</span></div><div class="line">                <span class="keyword">return</span> house.getCommunityName();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">Observable.concat(groupByCommunityNameObservable) <span class="comment">//concat组合操作符，将多个Observable有序组合并发送，后期会详细讲解</span></div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"groupBy："</span> + <span class="string">"小区："</span> + house.getCommunityName() + <span class="string">"，价格："</span> + house.getPrice());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　创建一个新的Observable：groupByCommunityNameObservable，它将会发送一个带有GroupedObservable的序列（也就是指发送的数据项的类型为GroupedObservable）。GroupedObservable是一个特殊的Observable，它基于一个分组的key，在这个例子中的key就是小区名。<br>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">groupBy：小区：东方花园，价格：<span class="number">200</span></div><div class="line">groupBy：小区：东方花园，价格：<span class="number">170</span></div><div class="line">groupBy：小区：东方花园，价格：<span class="number">210</span></div><div class="line">groupBy：小区：东方花园，价格：<span class="number">180</span></div><div class="line">groupBy：小区：马德里春天，价格：<span class="number">300</span></div><div class="line">groupBy：小区：马德里春天，价格：<span class="number">350</span></div><div class="line">groupBy：小区：帝豪家园，价格：<span class="number">250</span></div><div class="line">groupBy：小区：帝豪家园，价格：<span class="number">400</span></div></pre></td></tr></table></figure></p>
<p>　　原理图：</p>
<p><div align="center"><br>　　<img src="/img/RxJava/groupBy.png" alt=""><br></div></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　到此，本篇关于RxJava的常用转换类操作符就讲解完毕了，下一篇我们将一起研究RxJava的四类操作符中的过滤操作符都有哪些以及如何使用。<br>　　技术渣一枚，有写的不对的地方欢迎大神们留言指正，有什么疑惑或者建议也可以在我Github上RxJavaDemo项目Issues中提出，我会及时回复。<br>　　附上RxJavaDemo的地址：<br>　　<a href="https://github.com/LeiHolmes/RxJavaDemo" target="_blank" rel="external">RxJavaDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　上一篇文章我们学习了创建类操作符，本篇我们将一起来学习RxJava转换类操作符。所谓转换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。下面来看下转换类操作符都有哪些及其使用场景。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://LeiHolmes.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava操作符之创建操作符(三)</title>
    <link href="http://LeiHolmes.github.io/2017/10/11/RxJava%E6%93%8D%E4%BD%9C%E7%AC%A6%E4%B9%8B%E5%88%9B%E5%BB%BA%E6%93%8D%E4%BD%9C%E7%AC%A6(%E4%B8%89)/"/>
    <id>http://LeiHolmes.github.io/2017/10/11/RxJava操作符之创建操作符(三)/</id>
    <published>2017-10-10T16:00:00.000Z</published>
    <updated>2017-10-16T06:37:37.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　通过前两篇文章对于RxJava概念，原理及使用的学习，想必各位码友已经基本掌握RxJava的逻辑与功能了，那么从这篇文章开始我们来研究RxJava的各类操作符。<br>　　<a id="more"></a><br>　　什么是操作符？通过之前的学习，我们发现Observable负责发送事件，Observer负责接收事件，而这个过程中想要对事件数据做出修改就需要交给操作符来负责啦。主流RxJava中操作符主要分为三类：转换操作符，过滤操作符，组合操作符。而我个人将用来创建Observable的操作符归为了一个新类型。本篇我们就来看看常用的创建操作符都有哪些以及如何使用。</p>
<h3 id="创建操作符"><a href="#创建操作符" class="headerlink" title="创建操作符"></a>创建操作符</h3><h4 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h4><p>　　上一篇文章的例子中我们已经实践了create操作符如何使用了，这里我们介绍一种便捷的创建Observer的方式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">            subscriber.onNext(<span class="string">"xulei"</span> + i);</div><div class="line">        &#125;</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"create:"</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　subscribe()的入参使用Action1代替原来的Observer，只需重写一个call()方法，等同于原Observer中onNext()方法。如果需要onComplete与onError状态，还可以如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">.subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"create:"</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"onError:"</span> + throwable.getMessage());</div><div class="line">    &#125;</div><div class="line">&#125;, <span class="keyword">new</span> Action0() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　使用new ActionX代替new Observer，代码是不是看起来更加灵活与简洁呢。</p>
<h4 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h4><p>　　just操作符可将某个或某些对象转化为Observable对象，并将其发射出去。参数可为一个或多个数字，字符串。也可为集合，数组，Iterate对象等。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"just:数字："</span> + integer);</div><div class="line">        <span class="comment">//数字或者字符串都是单个发射多次</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">stringList.add(<span class="string">"Hello"</span>);</div><div class="line">stringList.add(<span class="string">"Ha"</span>);</div><div class="line">stringList.add(<span class="string">"RxJava"</span>);</div><div class="line">Observable.just(stringList).subscribe(<span class="keyword">new</span> Action1&lt;List&lt;String&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"just:集合："</span> + strings.toString());</div><div class="line">        <span class="comment">//集合或数组是直接发射集合整体，不会拆分</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">just:数字：<span class="number">1</span></div><div class="line">just:数字：<span class="number">2</span></div><div class="line">just:数字：<span class="number">3</span></div><div class="line">just:数字：<span class="number">4</span></div><div class="line">just:数字：<span class="number">5</span></div><div class="line">just:数字：<span class="number">6</span></div><div class="line">just:集合：[Hello, Ha, RxJava]</div></pre></td></tr></table></figure></p>
<h4 id="From"><a href="#From" class="headerlink" title="From"></a>From</h4><p>　　from操作符可将某个对象转化为Observable对象，并且将其发射出去。不同于just，他接收集合或数组，并可将集合数组遍历之后拆分发送。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">stringList.add(<span class="string">"Hello"</span>);</div><div class="line">stringList.add(<span class="string">"Ha"</span>);</div><div class="line">stringList.add(<span class="string">"RxJava"</span>);</div><div class="line">Observable.from(stringList).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"from："</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">from：Hello</div><div class="line">from：Ha</div><div class="line">from：RxJava</div></pre></td></tr></table></figure></p>
<h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><p>　　range(int start, int count)操作符，根据初始值start，与数量count，发射count次以start为基数依次增加的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">4</span>, <span class="number">5</span>).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"range："</span> + integer);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">range：<span class="number">4</span></div><div class="line">range：<span class="number">5</span></div><div class="line">range：<span class="number">6</span></div><div class="line">range：<span class="number">7</span></div><div class="line">range：<span class="number">8</span></div></pre></td></tr></table></figure></p>
<h4 id="Defer"><a href="#Defer" class="headerlink" title="Defer"></a>Defer</h4><p>　　defer操作符功能类似于just操作符，不同之处在于defer只有在调用subscribe()方法进行订阅时才创建Observable，而just操作符在初始化Observable就已经创建了，且只创建一个Observable实例。这里我们通过与just对比进行实践。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Action1&lt;String&gt; action1 = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//defer</span></div><div class="line">Observable&lt;String&gt; deferObservable = Observable.defer(<span class="keyword">new</span> Func0&lt;Observable&lt;String&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;String&gt; <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        Object o = <span class="keyword">new</span> Object();</div><div class="line">        <span class="keyword">return</span> Observable.just(<span class="string">"defer：hashCode："</span> + o.hashCode());</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">deferObservable.subscribe(action1);</div><div class="line">deferObservable.subscribe(action1);</div><div class="line">deferObservable.subscribe(action1);</div><div class="line"></div><div class="line"><span class="comment">//just</span></div><div class="line">Observable&lt;String&gt; justObservable = Observable.just(<span class="string">"just：hashCode："</span> + <span class="keyword">new</span> Object().hashCode());</div><div class="line">justObservable.subscribe(action1);</div><div class="line">justObservable.subscribe(action1);</div><div class="line">justObservable.subscribe(action1);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">defer：hashCode：<span class="number">112449879</span></div><div class="line">defer：hashCode：<span class="number">118897732</span></div><div class="line">defer：hashCode：<span class="number">191664429</span></div><div class="line">just：hashCode：<span class="number">121878114</span></div><div class="line">just：hashCode：<span class="number">121878114</span></div><div class="line">just：hashCode：<span class="number">121878114</span></div></pre></td></tr></table></figure></p>
<p>　　由输出结果我们可以看出defer每次输出的Observable哈西值是不同的，说明其每subscribe订阅一次都会创建一个新的Observable，从而可保证Observable中的数据都是最新的。而just只有初始化的时候创建一次Observable。</p>
<h4 id="Interval"><a href="#Interval" class="headerlink" title="Interval"></a>Interval</h4><p>　　interval创建操作符，创建一个Observabel并每隔一段时间周期发射一个由0开始增加的数字。<br>　　<strong>注意：此Observabel是运行在新的线程，所以更新UI需要在主线程中订阅</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//每隔100ms发射一个数字,从0自增</span></div><div class="line">Observable.interval(<span class="number">100</span>, TimeUnit.MILLISECONDS) <span class="comment">//单位为毫秒</span></div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .take(<span class="number">5</span>) <span class="comment">//取前5次事件发射，take为过滤操作符，后期会详细讲</span></div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"interval："</span> + aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="number">100</span>ms后...</div><div class="line">interval：<span class="number">0</span></div><div class="line"><span class="number">100</span>ms后...</div><div class="line">interval：<span class="number">1</span></div><div class="line"><span class="number">100</span>ms后...</div><div class="line">interval：<span class="number">2</span></div><div class="line"><span class="number">100</span>ms后...</div><div class="line">interval：<span class="number">3</span></div><div class="line"><span class="number">100</span>ms后...</div><div class="line">interval：<span class="number">4</span></div></pre></td></tr></table></figure></p>
<h4 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h4><p>　　timer操作符，创建一个Observable并隔一段时间后发射一个特殊的值，仅发射一次。<br>　　<strong>注意：此Observabel是运行在新的线程，所以更新UI需要在主线程中订阅</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//隔1s后发射一个数字</span></div><div class="line">Observable.timer(<span class="number">1</span>, TimeUnit.SECONDS) <span class="comment">//单位为秒</span></div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Long&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Long aLong)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"timer："</span> + aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span>秒后...</div><div class="line">timer：<span class="number">0</span></div></pre></td></tr></table></figure></p>
<h4 id="Delay"><a href="#Delay" class="headerlink" title="Delay"></a>Delay</h4><p>　　delay操作符，可用于延迟一定时长再发送事件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//延迟2秒后发射事件</span></div><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">        .delay(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"delay："</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span>秒后...</div><div class="line">delay：<span class="number">1</span></div><div class="line">delay：<span class="number">2</span></div><div class="line">delay：<span class="number">3</span></div></pre></td></tr></table></figure></p>
<h4 id="Repeat"><a href="#Repeat" class="headerlink" title="Repeat"></a>Repeat</h4><p>　　repeat(long count)操作符，将Observable重复发射count次。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//重复发射5次“Sherlock”</span></div><div class="line">Observable.just(<span class="string">"Sherlock"</span>).repeat(<span class="number">5</span>)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                Log.e(<span class="string">"rx_test"</span>, <span class="string">"repeat："</span> + s);</div><div class="line">            &#125;</div><div class="line">     &#125;);</div></pre></td></tr></table></figure></p>
<p>　　输出结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">repeat：Sherlock</div><div class="line">repeat：Sherlock</div><div class="line">repeat：Sherlock</div><div class="line">repeat：Sherlock</div><div class="line">repeat：Sherlock</div></pre></td></tr></table></figure></p>
<p>　　以上就是常用的一些创建操作符，类似但不常用的还有empty、never、error等等就不一一介绍了，有兴趣的码友可以自行百度。</p>
<h3 id="线程调度Scheduler"><a href="#线程调度Scheduler" class="headerlink" title="线程调度Scheduler"></a>线程调度Scheduler</h3><p>　　RxJava就是用来处理异步任务的，所以就牵扯到生产事件所在线程，处理事件所在线程的问题，下面来看一下RxJava提供的线程调度Scheduler都有哪些。</p>
<p><div align="center"><br>　　<img src="/img/RxJava/schedulers.jpg" alt=""><br></div><br>　　有了Scheduler，RxJava当然也提供了方法来使用它们。<br>　　<strong>.subscribeOn()</strong>指定被观察者Observable的执行线程。<br>　　<strong>.observeOn()</strong>指定观察者Observer的执行线程。<br>　　如第一篇文章中的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取要查询的小区集合</span></div><div class="line">Observable.from(getCommunitiesFromServer())</div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Community, Observable&lt;House&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;House&gt; <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.from(community.getHouses());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .filter(<span class="keyword">new</span> Func1&lt;House, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> house.getPrice() &lt; <span class="number">200</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="comment">//显示查询出来的房源信息</span></div><div class="line">                ShowSearchedHousesMessage();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　其中<code>.subscribeOn(Schedulers.io())</code>指定了Observable在io线程运行，通常用来执行从服务器获取数据，数据库加载等耗时操作。<code>.observeOn(AndroidSchedulers.mainThread())</code>指定了Observer在Android环境下的UI线程运行，通常用来获取到数据后进行UI刷新的操作。可根据实际需求选择不同线程类型。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　到此，本篇关于RxJava的创建类操作符以及线程调度就讲解完毕了，下一篇我们将一起研究RxJava的四类操作符中的转换操作符都有哪些以及如何使用。<br>　　技术渣一枚，有写的不对的地方欢迎大神们留言指正，有什么疑惑或者建议也可以在我Github上RxJavaDemo项目Issues中提出，我会及时回复。<br>　　附上RxJavaDemo的地址：<br>　　<a href="https://github.com/LeiHolmes/RxJavaDemo" target="_blank" rel="external">RxJavaDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　通过前两篇文章对于RxJava概念，原理及使用的学习，想必各位码友已经基本掌握RxJava的逻辑与功能了，那么从这篇文章开始我们来研究RxJava的各类操作符。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://LeiHolmes.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava基本原理与使用(二)</title>
    <link href="http://LeiHolmes.github.io/2017/09/28/RxJava%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86%E4%B8%8E%E4%BD%BF%E7%94%A8(%E4%BA%8C)/"/>
    <id>http://LeiHolmes.github.io/2017/09/28/RxJava基本原理与使用(二)/</id>
    <published>2017-09-27T16:00:00.000Z</published>
    <updated>2017-10-16T09:54:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　上一篇我们了解了RxJava的介绍以及通过一个例子学习了RxJava的展现形式，相信大家现在已经对RxJava有一个初步的印象与概念了。本篇我们将更深入的学习RxJava的基本原理以及如何使用RxJava。<br>　　<a id="more"></a></p>
<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>　　上一篇有提到RxJava的核心便是扩展的观察者模式，我们先来学习一下观察者模式。  </p>
<p><div align="center"><br>　　<img src="/img/RxJava/example.jpeg" alt=""><br></div><br>　　事件：小明按下遥控器开关，空调启动并开始吹风了。按下制冷按键，空调吹出的风变为凉风。再按下3档风速按键，空调吹的风变大了。<br>　　在这个事件中，<strong>空调作为观察者，遥控器作为被观察者，空调通过红外线检测遥控器传来的信号并作出响应。</strong>  </p>
<p><div align="center"><br>　　<img src="/img/RxJava/connect.png" alt=""><br></div><br>　　通过上图我们可以很清晰的看出遥控器作为事件的生产方<strong>主动</strong>发起事件，是事件的起点，而空调作为事件的处理方<strong>被动</strong>接收事件做出响应，是事件的终点。而在事件传递的过程中可对事件进行过滤，转换，合并等操作，就像例子中制冷与加大风速的效果。<br>　　这个概念是RxJava中的核心，它是基于观察者模式来组建自己的程序逻辑，遥控器就相当于RxJava的<strong>被观察者Observable</strong>，空调相当于<strong>观察者Observer</strong>，而对事件处理的一些操作相当于各类<strong>操作符</strong>。不同的是RxJava中观察者需要对被观察者进行订阅，这样当被观察者发出事件时，观察者才会接收到事件进行处理。若未进行订阅，被观察者是不会发出任何事件的。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>　　了解了观察者模式，接下来动起指尖尝试下怎么使用RxJava。</p>
<h4 id="创建被观察者Observable"><a href="#创建被观察者Observable" class="headerlink" title="创建被观察者Observable"></a>创建被观察者Observable</h4><p>　　第一步：创建被观察者Observable：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Object&gt; observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Object&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Object&gt; subscriber)</span> </span>&#123;</div><div class="line">        <span class="comment">//被观察者的数据操作更新</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</div><div class="line">            subscriber.onNext(<span class="string">"xulei"</span> + i);</div><div class="line">        &#125;</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　通过<code>Observable.create()</code>方法创建并返回一个Observable对象，create()方法需要一个OnSubsribe对象作为参数传入并执行call()方法。此OnSubsribe对象继承自Action1。<br>　　而在call()方法中可通过<code>subscriber.onNext()</code>进行事件的发送，<code>subscriber.onCompleted()</code>标记为事件发送完毕。<code>subscriber.onError()</code>标记为事件发送过程出现异常。<br>　　除create()方法创建Observable方式外，还可以使用just()与from()等方式，这个在之后的创建操作符文章中会有讲解。</p>
<h4 id="创建观察者Observer"><a href="#创建观察者Observer" class="headerlink" title="创建观察者Observer"></a>创建观察者Observer</h4><p>　　第二步：创建观察者Observer：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observer observer = <span class="keyword">new</span> Observer() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123; <span class="comment">//标记事件发送完毕的回调</span></div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123; <span class="comment">//事件发送过程出现异常的回调</span></div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"onError"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123; <span class="comment">//接收到发送事件的回调</span></div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"onNext:"</span> + o.toString());</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>　　在以往普通的观察者模式中，观察者通常只提供一个update()的方法，而RxJava扩展的观察者模式中的观察者提供<code>onNext(Object o)</code>，<code>onCompleted()</code>，<code>onError(Throwable e)</code>三个方法，分别对应被观察者call()方法中重写的<code>subscriber.onNext()</code>，<code>subscriber.onCompleted()</code>，<code>subscriber.onError()</code>方法。而onNext()方法就对应普通观察者模式中的update()方法。<br>　　RxJava扩展的观察模式弥补了普通观察者模式的不足：<br>　　1. 当事件发送完毕可以调用onCompleted()方法进行标示。<br>　　2. 当事件发送过程中出现异常会自动触发onError()方法，也可进行手动调用。<br>　　3. Observable支持链式编程，从而避免了回调嵌套的问题，也简化了代码。</p>
<h4 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h4><p>　　最后一步：被观察者Observable订阅观察者Observer。<br>　　这里不同于普通观察者模式，上一篇我们讲了在RxJava扩展观察者模式中，如果没有观察者，被观察者是不会发出任何事件的。所以这里是被观察者订阅观察者。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(observer);</div></pre></td></tr></table></figure></p>
<p><div align="center"><br>　　<img src="/img/RxJava/subscribe.png" alt=""><br></div><br>　　订阅很简单，一行代码搞定。调用Observable的subscribe()方法，传入观察者对象作为参数，这样被观察者与观察者就进行了绑定。</p>
<h4 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h4><p>　　RxJava可以使用链式编程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Object&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Object&gt; subscriber)</span> </span>&#123;</div><div class="line">        <span class="comment">//被观察者的数据操作更新</span></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">            subscriber.onNext(<span class="string">"xulei"</span> + i);</div><div class="line">        &#125;</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Observer&lt;Object&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"onError"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        Log.e(<span class="string">"rx_test"</span>, <span class="string">"onNext:"</span> + o.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="逻辑梳理"><a href="#逻辑梳理" class="headerlink" title="逻辑梳理"></a>逻辑梳理</h4><p>　　到此一个RxJava的简单调用就实现了，相信不少码友看完之后还是很懵13，那我们再来梳理一下整个流程。首先使用<code>Observable.create()</code>创建了一个Observable<integer>，并在create()方法中传入了一个OnSubscribe对象作为参数，重写OnSubscribe中的call()方法，当Observable进行订阅后就会自动触发call()方法发送事件。<br>　　<strong>注意</strong>：call()方法中的subscriber参数其实就是我们在调用subscribe()进行订阅时时传入的观察者Observer。所以当在call()方法中调用的5次onNext()方法与1次onCompleted()方法后，观察者Observer中输出的日志为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">onNext:xulei0</div><div class="line">onNext:xulei1</div><div class="line">onNext:xulei2</div><div class="line">onNext:xulei3</div><div class="line">onNext:xulei4</div><div class="line">onCompleted</div></pre></td></tr></table></figure></integer></p>
<p>　　有的码友看到这里会对call()方法中的subscriber参数就是订阅时传入的Observer有些不解，那么我们一起来看源码。<br>　　先看下call()方法中的参数Subscriber：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Observer</span>&lt;<span class="title">T</span>&gt;, <span class="title">Subscription</span> </span>&#123;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　可以看出Subscriber是Observer的抽象实现类，与Observer一个类型。再来看订阅时调用的subscribe(observer)方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Subscription <span class="title">subscribe</span><span class="params">(<span class="keyword">final</span> Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</div><div class="line">    <span class="comment">//无视</span></div><div class="line">    <span class="keyword">if</span> (observer <span class="keyword">instanceof</span> Subscriber) &#123;</div><div class="line">        <span class="keyword">return</span> subscribe((Subscriber&lt;? <span class="keyword">super</span> T&gt;)observer);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> subscribe(<span class="keyword">new</span> Subscriber&lt;T&gt;() &#123;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">            observer.onCompleted();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">            observer.onError(e);</div><div class="line">        &#125;</div><div class="line">    </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">            observer.onNext(t);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　这里将传入的Observer对象通过代理转换为Subscriber对象作为参数传入并调用重载方法subscribe()，我们再来看这个subscribe()方法的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Subscription <span class="title">subscribe</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> T&gt; subscriber)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> Observable.subscribe(subscriber, <span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　这里继续调用重载方法subscribe()，将由Observer转换为的subscriber对象与当前Observable对象作为参数传入，继续往下追踪源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Subscription <span class="title">subscribe</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> T&gt; subscriber, Observable&lt;T&gt; observable)</span> </span>&#123;</div><div class="line">    ......</div><div class="line">    subscriber.onStart();</div><div class="line">    ......</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        hook.onSubscribeStart(observable, observable.onSubscribe).call(subscriber);</div><div class="line">        <span class="keyword">return</span> hook.onSubscribeReturn(subscriber);</div><div class="line">    &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">        ......</div><div class="line">        <span class="keyword">return</span> Subscriptions.unsubscribed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　精简一下代码发现，<code>subscriber.onStart()</code>用来通知被观察者准备开始发送事件了。重点看<code>hook.onSubscribeStart(observable, observable.onSubscribe).call(subscriber);</code>我们发现<code>hook.onSubscribeStart(observable, observable.onSubscribe)</code>方法返回的是其第二个参数observable.onSubscribe，这个参数正是新建Observable时create()方法中传入的OnSubscribe对象。接着又通过这个onSubscribe调用call(subscriber)方法，将subscriber作为参数传入，码友们有没有发现，这个subscriber传来传去究其根源，正是一开始由订阅方法subscribe(observer)传入的observer通过代理转换为的那个subscriber。<br>　　这样前后逻辑就连接上了，通过阅读源码我们才能发现为何创建Observable时call()方法中的subscriber参数其实就是订阅时传入的Observer。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　到此，本篇关于RxJava的基本原理与使用就讲解完毕了，下一篇我们将一起研究RxJava的四类操作符中的创建操作符都有哪些以及如何使用。<br>　　这里感谢下张磊大神撰写的RxJava系列的帮助：<br>　　<a href="https://zhuanlan.zhihu.com/p/20687307" target="_blank" rel="external">RxJava系列2(基本概念及使用介绍)</a><br>　　技术渣一枚，有写的不对的地方欢迎大神们留言指正，有什么疑惑或者建议也可以在我Github上RxJavaDemo项目Issues中提出，我会及时回复。<br>　　附上RxJavaDemo的地址：<br>　　<a href="https://github.com/LeiHolmes/RxJavaDemo" target="_blank" rel="external">RxJavaDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　上一篇我们了解了RxJava的介绍以及通过一个例子学习了RxJava的展现形式，相信大家现在已经对RxJava有一个初步的印象与概念了。本篇我们将更深入的学习RxJava的基本原理以及如何使用RxJava。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://LeiHolmes.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava简介与入门(一)</title>
    <link href="http://LeiHolmes.github.io/2017/09/21/RxJava%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%85%A5%E9%97%A8(%E4%B8%80)/"/>
    <id>http://LeiHolmes.github.io/2017/09/21/RxJava简介与入门(一)/</id>
    <published>2017-09-20T16:00:00.000Z</published>
    <updated>2017-10-13T08:32:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>　　最近在学习RxJava的过程中,越发感受到这个框架的强大，对于提升开发效率，降低维护成本有很大的作用。有必要强行安利一波，一起来看看RxJava简介，基本概念，原理与使用，本篇主要介绍RxJava的简介。<br>　　<a id="more"></a></p>
<h3 id="响应式编程ReactiveX"><a href="#响应式编程ReactiveX" class="headerlink" title="响应式编程ReactiveX"></a>响应式编程ReactiveX</h3><p>　　RxJava是ReactiveX中使用Java语言实现的版本，那什么是ReactiveX呢？ReactiveX就是一种新兴的编程模式–响应式编程，定义为一种基于异步数据流概念的编程模式，可分解为”观察者模式+迭代器模式+函数式编程”。</p>
<h3 id="扩展的观察者模式"><a href="#扩展的观察者模式" class="headerlink" title="扩展的观察者模式"></a>扩展的观察者模式</h3><p>　　有关观察者模式的概念不懂得童鞋可自行google，这里就不再赘述。RxJava扩展了观察者模式，通过使用可观察的对象序列流来表述一系列事件，订阅者进行占点观察并对序列流做出反应（或持久化或输出显示等等）；借鉴迭代器模式，对多个对象序列进行迭代输出，订阅者可以依次处理不同的对象序列；使用函数式编程思想，简化繁琐的逻辑代码。<br>　　而RxJava的核心便是被观察者Observables与观察者Observer，由Observables发出一系列的事件，Observer通过subscribe()方法进行订阅接收事件并进行处理，类似观察者模式，不同之处在于，若没有观察者，被观察者是不会发出任何事件的。<br>　　所以说，<strong>RxJava本质上是一个异步操作库，是一个能让你用极其简洁的逻辑去处理繁琐复杂任务的异步事件库。</strong></p>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>　　概念理解起来未免晦涩难懂，我们来看一个例子：<br>　　有这样一个需求：开发一个类似房天下的App，某功能需要检索出某一片区所有住宅小区中购房总价&lt;200W的房源并展示出来。先看原始实现方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//获取要查询的小区集合</span></div><div class="line">        List&lt;Community&gt; communities = getCommunities();</div><div class="line">        <span class="keyword">for</span> (Community community : communities) &#123;</div><div class="line">            <span class="comment">//获取小区中的房源集合</span></div><div class="line">            List&lt;House&gt; houses = community.getHouses();</div><div class="line">            <span class="keyword">for</span> (House house : houses) &#123;</div><div class="line">                <span class="keyword">if</span> (house.getPrice() &lt; <span class="number">200</span>) &#123;</div><div class="line">                    runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                            <span class="comment">//显示查询出来的房源信息</span></div><div class="line">                            ShowSearchedHousesMessage();</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure>
<p>　　RxJava实现方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取要查询的小区集合</span></div><div class="line">List&lt;Community&gt; communities = getCommunities();</div><div class="line">Observable.from(communities)</div><div class="line">        .flatMap(<span class="keyword">new</span> Func1&lt;Community, Observable&lt;House&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Observable&lt;House&gt; <span class="title">call</span><span class="params">(Community community)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> Observable.from(community.getHouses());</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .filter(<span class="keyword">new</span> Func1&lt;House, Boolean&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> house.getPrice() &lt; <span class="number">200</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;House&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(House house)</span> </span>&#123;</div><div class="line">                <span class="comment">//显示查询出来的房源信息</span></div><div class="line">                ShowSearchedHousesMessage();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure></p>
<p>　　RxJava的实现方式看上去更复杂了，但是它的逻辑很清晰简洁，修改起来很方便，后期维护起来也能提高工作效率。再来看下配合Lambda表达式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取要查询的小区集合</span></div><div class="line">List&lt;Community&gt; communities = getCommunities();</div><div class="line">Observable.from(communities)</div><div class="line">        .flatMap(community -&gt; Observable.from(community.getHouses())</div><div class="line">        .filter(house -&gt; house.getPrice() &lt; <span class="number">200</span>)</div><div class="line">        .subscribeOn(Schedulers.io())</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(house -&gt; ShowSearchedHousesMessage());</div></pre></td></tr></table></figure></p>
<p>　　搭配上Lambda表达式，代码的简洁度是不是更上一层楼呢？不懂Lambda表达式的童鞋可以跳转到我写的另一篇讲解Lambda表达式的文章：<br>　　<a href="http://xulei.tech/2017/07/24/Lambda表达式基本语法与应用/" target="_blank" rel="external">Android开发之Lambda表达式基本语法与应用</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　到此，本篇关于RxJava的简介就介绍完毕了，本篇的目的主要是给大家引入一个RxJava的概念，以便后期更轻松的理解RxJava的原理与运作。下一篇我们再来一起详细研究RxJava的原理及如何使用。<br>　　技术渣一枚，有写的不对的地方欢迎大神们留言指正，有什么疑惑或者建议也可以在我Github上RxJavaDemo项目Issues中提出，我会及时回复。附上RxJavaDemo的地址：<br>　　<a href="https://github.com/LeiHolmes/RxJavaDemo" target="_blank" rel="external">RxJavaDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;　　最近在学习RxJava的过程中,越发感受到这个框架的强大，对于提升开发效率，降低维护成本有很大的作用。有必要强行安利一波，一起来看看RxJava简介，基本概念，原理与使用，本篇主要介绍RxJava的简介。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RxJava" scheme="http://LeiHolmes.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Lambda表达式基本语法与应用</title>
    <link href="http://LeiHolmes.github.io/2017/07/24/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E4%B8%8E%E5%BA%94%E7%94%A8/"/>
    <id>http://LeiHolmes.github.io/2017/07/24/Lambda表达式基本语法与应用/</id>
    <published>2017-07-23T16:00:00.000Z</published>
    <updated>2017-09-28T08:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Lambda简介"><a href="#Lambda简介" class="headerlink" title="Lambda简介"></a>Lambda简介</h3><p>　　Lambda表达式是Java8中提供的一种新的特性，它支持Java也能进行简单的“函数式编程”，即Lambda允许你通过表达式来代替功能接口，即可使用更少的代码来实现同样的功能。<br>　　<a id="more"></a><br>　　用官方的解释就是：</p>
<blockquote>
<p>A lambda expression is a block of code with parameters.<br>(Lambda表达式是一个带有参数的表达式)</p>
</blockquote>
<h3 id="添加支持"><a href="#添加支持" class="headerlink" title="添加支持"></a>添加支持</h3><p>　　首先Java版本需要为1.8，然后在build.gradle中添加：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    ……</div><div class="line">    defaultConfig &#123;</div><div class="line">        ……</div><div class="line">        jackOptions&#123;</div><div class="line">            enabled <span class="keyword">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    compileOptions &#123;</div><div class="line">        <span class="comment">//升级Android Studio的Language level为1.8</span></div><div class="line">        sourceCompatibility JavaVersion.VERSION_1_8</div><div class="line">        targetCompatibility JavaVersion.VERSION_1_8</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><h4 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a>完整示例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; &#123;</div><div class="line">    Log.i(<span class="string">"TAG"</span>, <span class="string">"x:"</span> + x + <span class="string">"  y:"</span> + y);</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>　　这是一个完整的Lambda表达式的写法，通常由三部分组成：<br>　　1. (int x, int y)：Lambda表达式的参数部分，包括参数类型与参数名<br>　　2. “-&gt;”：箭头goes to，指向代码块<br>　　3. 代码块：用”{}”包裹的代码</p>
<h4 id="忽略参数类型"><a href="#忽略参数类型" class="headerlink" title="忽略参数类型"></a>忽略参数类型</h4><p>　　在大多数情况下，参数的类型系统可根据上下文推断出来。这种情况参数类型就可以忽略不写。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">(x, y) -&gt; &#123;</div><div class="line">    Log.i(<span class="string">"TAG"</span>, <span class="string">"x:"</span> + x + <span class="string">"  y:"</span> + y);</div><div class="line">    <span class="keyword">return</span> x + y;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="忽略：”-”"><a href="#忽略：”-”" class="headerlink" title="忽略：”()”"></a>忽略：”()”</h4><p>　　当只有一个参数时，”()”可以忽略不写。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">x -&gt; &#123;</div><div class="line">    Log.i(<span class="string">"TAG"</span>, <span class="string">"x:"</span> + x);</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　当没有参数时，”()”不可忽略。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">() -&gt; &#123;</div><div class="line">    Log.i(<span class="string">"TAG"</span>, <span class="string">"无参数"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="忽略：”-”-1"><a href="#忽略：”-”-1" class="headerlink" title="忽略：”{}”"></a>忽略：”{}”</h4><p>　　当代码块只包含一条语句时可忽略”{}”不写。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(x, y) -&gt; <span class="keyword">return</span> x + y;</div></pre></td></tr></table></figure></p>
<h4 id="忽略return"><a href="#忽略return" class="headerlink" title="忽略return"></a>忽略return</h4><p>　　而return关键字也是可以忽略不写的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(x, y) -&gt; x + y;</div></pre></td></tr></table></figure></p>
<p>　　精简到最后只需要一行代码就可以搞定，是不是很方便。</p>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><h4 id="无参数-语句-代码块"><a href="#无参数-语句-代码块" class="headerlink" title="无参数+语句/代码块"></a>无参数+语句/代码块</h4><p>　　常规写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"TAG"</span>, <span class="string">"测试无参数+语句/代码块"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div></pre></td></tr></table></figure></p>
<p>　　Lambda写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread(() -&gt; Log.i(<span class="string">"TAG"</span>, <span class="string">"测试无参数+语句/代码块"</span>)).start();</div></pre></td></tr></table></figure></p>
<p>　　适用于匿名内部类中方法无参数的情况</p>
<h4 id="有参数-语句"><a href="#有参数-语句" class="headerlink" title="有参数+语句"></a>有参数+语句</h4><p>　　常规写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"TAG"</span>, <span class="string">"测试有参数+语句"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　Lambda写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">findViewById(R.id.button).setOnClickListener(v -&gt; Log.i(<span class="string">"TAG"</span>, <span class="string">"测试有参数+语句"</span>));</div></pre></td></tr></table></figure></p>
<p>　　适用于匿名内部类中方法只有一个参数的情况</p>
<h4 id="有参数-代码块"><a href="#有参数-代码块" class="headerlink" title="有参数+代码块"></a>有参数+代码块</h4><p>　　常规写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">CheckBox checkBox = (CheckBox) findViewById(R.id.checkBox);</div><div class="line">checkBox.setOnCheckedChangeListener(<span class="keyword">new</span> CompoundButton.OnCheckedChangeListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCheckedChanged</span><span class="params">(CompoundButton buttonView, <span class="keyword">boolean</span> isChecked)</span> </span>&#123;</div><div class="line">        Log.i(<span class="string">"TAG"</span>, <span class="string">"测试有参数+代码块1"</span>);</div><div class="line">        Log.i(<span class="string">"TAG"</span>, <span class="string">"测试有参数+代码块2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　Lambda写法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">checkBox.setOnCheckedChangeListener((buttonView, isChecked) -&gt; &#123;</div><div class="line">    Log.i(<span class="string">"TAG"</span>, <span class="string">"测试有参数+代码块1"</span>);</div><div class="line">    Log.i(<span class="string">"TAG"</span>, <span class="string">"测试有参数+代码块2"</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>　　适用于匿名内部类中方法不止一个参数且执行语句不止一行的情况</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　Lambda表达式的应用场景很多，例如可与RxJava，Retrofit等进行完美配合，更多的就等待各位码友去实践发掘了。而到此，本篇关于Lambda表达式的详解与应用就讲解完毕了。技术渣一枚，有写的不对的地方欢迎大神们留言指正。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Lambda简介&quot;&gt;&lt;a href=&quot;#Lambda简介&quot; class=&quot;headerlink&quot; title=&quot;Lambda简介&quot;&gt;&lt;/a&gt;Lambda简介&lt;/h3&gt;&lt;p&gt;　　Lambda表达式是Java8中提供的一种新的特性，它支持Java也能进行简单的“函数式编程”，即Lambda允许你通过表达式来代替功能接口，即可使用更少的代码来实现同样的功能。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="Lambda" scheme="http://LeiHolmes.github.io/tags/Lambda/"/>
    
  </entry>
  
  <entry>
    <title>ORM框架之GreenDao3.0使用详解(二)</title>
    <link href="http://LeiHolmes.github.io/2017/07/13/ORM%E6%A1%86%E6%9E%B6%E4%B9%8BGreenDao3.0%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3(%E4%BA%8C)/"/>
    <id>http://LeiHolmes.github.io/2017/07/13/ORM框架之GreenDao3.0使用详解(二)/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-09-28T08:57:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本文介绍"><a href="#本文介绍" class="headerlink" title="本文介绍"></a>本文介绍</h3><p>　　上一篇讲解了GreenDao3.0如何集成环境与添加各类注解，这一篇我们来看看如何使用GreenDao实现数据库增删改查的功能，还是上一篇公司Company与雇员Employee的例子。<br>　　<a id="more"></a></p>
<h3 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h3><p>　　首先初始化数据库与表，可封装一个工具类，这里献上我的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreenDaoUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DaoSession daoSession;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SQLiteDatabase database;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化数据库</div><div class="line">     * 建议放在Application中执行</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">initDataBase</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="comment">//通过DaoMaster的内部类DevOpenHelper，可得到一个SQLiteOpenHelper对象。</span></div><div class="line">        DaoMaster.DevOpenHelper devOpenHelper = <span class="keyword">new</span> DaoMaster.DevOpenHelper</div><div class="line">        (context, <span class="string">"greendaoutil.db"</span>, <span class="keyword">null</span>); <span class="comment">//数据库名称</span></div><div class="line">        database = devOpenHelper.getWritableDatabase();</div><div class="line">        DaoMaster daoMaster = <span class="keyword">new</span> DaoMaster(database);</div><div class="line">        daoSession = daoMaster.newSession();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DaoSession <span class="title">getDaoSession</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> daoSession;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SQLiteDatabase <span class="title">getDatabase</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> database;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　然后在Application中调用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        GreenDaoUtil.initDataBase(getApplicationContext());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>　　插入公司与雇员的假数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取实体Dao</span></div><div class="line">CompanyDao companyDao = GreenDaoUtil.getDaoSession().getCompanyDao();</div><div class="line">EmployeeDao employeeDao = GreenDaoUtil.getDaoSession().getEmployeeDao();</div><div class="line"><span class="comment">//插入公司</span></div><div class="line">Company company1 = <span class="keyword">new</span> Company();</div><div class="line">company1.setId(<span class="keyword">null</span>);</div><div class="line">company1.setCompanyName(<span class="string">"Netease"</span>);</div><div class="line">company1.setIndustry(<span class="string">"news"</span>);</div><div class="line">Company company2 = <span class="keyword">new</span> Company();</div><div class="line">company2.setId(<span class="keyword">null</span>);</div><div class="line">company2.setCompanyName(<span class="string">"Tencent"</span>);</div><div class="line">company2.setIndustry(<span class="string">"chat"</span>);</div><div class="line">companyDao.insert(company1);</div><div class="line">companyDao.insert(company2);</div><div class="line"></div><div class="line"><span class="comment">//插入不同公司的雇员</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    Employee employee = <span class="keyword">new</span> Employee(<span class="keyword">null</span>, company1.getId(), <span class="string">"Sherlock"</span> + i, <span class="number">11000</span> + i * <span class="number">1000</span>);</div><div class="line">    employeeDao.insert(employee);</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    Employee employee = <span class="keyword">new</span> Employee(<span class="keyword">null</span>, company2.getId(), <span class="string">"Richard"</span> + i, <span class="number">8000</span> + i * <span class="number">1000</span>);</div><div class="line">    employeeDao.insert(employee);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　注意：设置setId(null)，GreenDao会自动分配自增Id。</p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>　　由于删除与更新基本都需要先进行查询，所以咱们来看看如何进行查询：</p>
<h4 id="QueryBuilder"><a href="#QueryBuilder" class="headerlink" title="QueryBuilder"></a>QueryBuilder</h4><p>　　举例：查询Tencent公司中薪水大于等于10000的职员。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询Company表中名为Tencent的公司</span></div><div class="line">Company company = companyDao.queryBuilder()</div><div class="line">.where(CompanyDao.Properties.CompanyName.eq(<span class="string">"Tencent"</span>))</div><div class="line">.unique();</div><div class="line"><span class="comment">//查询Employee表中属于Tencent公司且薪水水大于等于10000的Employee</span></div><div class="line">List&lt;Employee&gt; employeeList = employeeDao.queryBuilder()</div><div class="line">.where(EmployeeDao.Properties.CompanyId.eq(company.getId()), </div><div class="line">EmployeeDao.Properties.Salary.ge(<span class="number">10000</span>))</div><div class="line">.list();</div></pre></td></tr></table></figure></p>
<p>　　注意：如果查询调用.unique()的话，需注意本次查询的结果必须唯一，否则会报错。where中为查询条件，支持多条件查询以” , “隔开。</p>
<h4 id="Query"><a href="#Query" class="headerlink" title="Query"></a>Query</h4><p>　　使用Query可进行重复查询，更改查询条件参数即可，还是上面的例子。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询Company表中名为Tencent的公司</span></div><div class="line">Company company = companyDao.queryBuilder()</div><div class="line">.where(CompanyDao.Properties.CompanyName.eq(<span class="string">"Tencent"</span>))</div><div class="line">.unique();</div><div class="line"><span class="comment">//查询Employee表中属于Tencent公司且薪水水大于等于10000的Employee</span></div><div class="line">Query query = employeeDao.queryBuilder()</div><div class="line">.where(EmployeeDao.Properties.CompanyId.eq(company.getId()), </div><div class="line">EmployeeDao.Properties.Salary.ge(<span class="number">10000</span>))</div><div class="line">.build();</div><div class="line"><span class="comment">//修改查询条件参数</span></div><div class="line">query.setParameter(<span class="number">0</span>, company.getId());</div><div class="line">query.setParameter(<span class="number">1</span>, <span class="number">11000</span>);</div><div class="line">List&lt;Employee&gt; employeeList = query.list();</div></pre></td></tr></table></figure></p>
<h4 id="load-Long-key"><a href="#load-Long-key" class="headerlink" title="load(Long key)"></a>load(Long key)</h4><p>　　根据主键查询一条记录<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Company company =  companyDao.load(<span class="number">1l</span>);</div></pre></td></tr></table></figure></p>
<h4 id="loadAll"><a href="#loadAll" class="headerlink" title="loadAll()"></a>loadAll()</h4><p>　　查询表中所有记录<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;Company&gt; companyList = companyDao.loadAll();</div><div class="line">List&lt;Employee&gt; employeeList = employeeDao.loadAll();</div></pre></td></tr></table></figure></p>
<h4 id="原声sql查询"><a href="#原声sql查询" class="headerlink" title="原声sql查询"></a>原声sql查询</h4><p>　　推荐通过QueryBuilder和WhereCondition.StringCondition来实现原声sql查询。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Query query = companyDao.queryBuilder()</div><div class="line">.where( <span class="keyword">new</span> StringCondition(<span class="string">"_ID IN "</span> + <span class="string">"(SELECT USER_ID FROM USER_MESSAGE WHERE READ_FLAG = 0)"</span>))</div><div class="line">.build();</div></pre></td></tr></table></figure></p>
<p>　　也可使用queryRaw()或queryRawCreate()方法来实现。</p>
<h4 id="多线程查询"><a href="#多线程查询" class="headerlink" title="多线程查询"></a>多线程查询</h4><p>　　如果数据量过大，对于数据库查询的操作是很耗时的，所以需要开启新的线程进行查询。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">queryThread</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Query query = employeeDao.queryBuilder().build();</div><div class="line">    <span class="keyword">new</span> Thread()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            List list = query.forCurrentThread().list();</div><div class="line">        &#125;</div><div class="line">    &#125;.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="查询条件判断"><a href="#查询条件判断" class="headerlink" title="查询条件判断"></a>查询条件判断</h4><h5 id="eq-noteq与like查询"><a href="#eq-noteq与like查询" class="headerlink" title="eq,noteq与like查询"></a>eq,noteq与like查询</h5><p>　　eq判断值是否相等，通常用来具体查找，返回一条指定类型数据。<br>　　noteq与eq相反，判断值是否不等，通常用来模糊查找，返回指定类型的集合。<br>　　like相当于通配符查询，包含查询值的实体都会返回，同样模糊查找，返回指定类型的集合。</p>
<h5 id="gt-、-lt-、-gt-、-lt-查询"><a href="#gt-、-lt-、-gt-、-lt-查询" class="headerlink" title="&gt;、&lt;、&gt;=、&lt;=查询"></a>&gt;、&lt;、&gt;=、&lt;=查询</h5><p>　　分别对应方法：<br>　　&gt;: gt()<br>　　&lt;: lt()<br>　　&gt;=: ge()<br>　　&lt;=: le()</p>
<h5 id="isNull与isNotNull"><a href="#isNull与isNotNull" class="headerlink" title="isNull与isNotNull"></a>isNull与isNotNull</h5><p>　　为空与不为空，判断数据库中有无数据。</p>
<h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>　　对查询结果进行排序，有升序与降序。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">List&lt;Employee&gt; employeeList = employeeDao.queryBuilder()</div><div class="line">.where(EmployeeDao.Properties.CompanyId.eq(company.getId()))</div><div class="line">.orderAsc(EmployeeDao.Properties.Salary)</div><div class="line">.list();</div></pre></td></tr></table></figure></p>
<p>　　上例中的<code>.orderAsc(EmployeeDao.Properties.Salary)</code>就是对查询出来的Employee按工资进行升序排序。同理降序为<code>.orderDesc(EmployeeDao.Properties.Salary)</code>。　　</p>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>　　删除主要有三种方式：</p>
<h4 id="deleteBykey-Long-key"><a href="#deleteBykey-Long-key" class="headerlink" title="deleteBykey(Long key)"></a>deleteBykey(Long key)</h4><p>　　根据key进行删除。举例：删除Tencent公司中薪水小于10000的人，需先查询出Employee表中属于Tencent公司且薪水小于10000的Employee实体，再进行删除。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询Company表中名为Tencent的公司</span></div><div class="line">Company companyTencent = companyDao.queryBuilder()</div><div class="line">.where(CompanyDao.Properties.CompanyName.eq(<span class="string">"Tencent"</span>))</div><div class="line">.unique();</div><div class="line"><span class="keyword">if</span> (companyTencent != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">//查询Employee表中属于Tencent公司且薪水小于10000的Employee</span></div><div class="line">    List&lt;Employee&gt; employeeList = employeeDao.queryBuilder()</div><div class="line">    .where(EmployeeDao.Properties.CompanyId.eq(companyTencent.getId()), </div><div class="line">    EmployeeDao.Properties.Salary.lt(<span class="number">10000</span>))</div><div class="line">    .list();</div><div class="line">    <span class="keyword">if</span> (employeeList != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Employee employee : employeeList) &#123;</div><div class="line">            <span class="comment">//进行删除</span></div><div class="line">            employeeDao.deleteByKey(employee.getId());</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Log.e(<span class="string">"greendao_test"</span>, <span class="string">"delete:deleteList为空"</span>);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    Log.e(<span class="string">"greendao_test"</span>, <span class="string">"delete:company为空"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="delete-Employee-entity"><a href="#delete-Employee-entity" class="headerlink" title="delete(Employee entity)"></a>delete(Employee entity)</h4><p>　　根据实体进行删除。举例：删除名为Tencent的公司。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询Company表中名为Tencent的公司</span></div><div class="line">Company companyTencent = companyDao.queryBuilder()</div><div class="line">.where(CompanyDao.Properties.CompanyName.eq(<span class="string">"Tencent"</span>))</div><div class="line">.unique();</div><div class="line">companyDao.delete(companyTencent);</div></pre></td></tr></table></figure></p>
<h4 id="deleteAll"><a href="#deleteAll" class="headerlink" title="deleteAll()"></a>deleteAll()</h4><p>　 若需删除表中所有实体，则调用此方法。举例：删除所有雇员。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">employeeDao.deleteAll();</div></pre></td></tr></table></figure></p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>　　若需对某个已存入数据库实体的属性进行修改，则需进行update操作。举例：修改Netease公司中薪水小于等于13000人的名字<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询Company表中名为Netease的公司</span></div><div class="line">Company companyNetease = companyDao.queryBuilder()</div><div class="line">.where(CompanyDao.Properties.CompanyName.eq(<span class="string">"Netease"</span>))</div><div class="line">.unique();</div><div class="line"><span class="keyword">if</span> (companyNetease != <span class="keyword">null</span>) &#123;</div><div class="line">    <span class="comment">//查询Employee表中查询Employee表中属于Netease公司且薪水小于等于13000人的Employee</span></div><div class="line">    List&lt;Employee&gt; employeeList = employeeDao.queryBuilder()</div><div class="line">    .where(EmployeeDao.Properties.CompanyId.eq(companyNetease.getId()), </div><div class="line">    EmployeeDao.Properties.Salary.le(<span class="number">13000</span>))</div><div class="line">    .list();</div><div class="line">    <span class="keyword">if</span> (employeeList != <span class="keyword">null</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (Employee employee : employeeList) &#123;</div><div class="line">            <span class="comment">//修改属性</span></div><div class="line">            employee.setEmployeeName(<span class="string">"baozi"</span>);</div><div class="line">            <span class="comment">//进行更新</span></div><div class="line">            employeeDao.update(employee);</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        Log.e(<span class="string">"greendao_test"</span>, <span class="string">"update:updateList为空"</span>);</div><div class="line">    &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    Log.e(<span class="string">"greendao_test"</span>, <span class="string">"update:company为空"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　到此，这一篇关于GreenDao3.0的使用就讲解完毕了，可结合上一篇集成与注解详解一起看。<br>　　技术渣一枚，有写的不对的地方欢迎大神们留言指正，有什么疑惑或者不懂的地方也可以在我Github上GreenDaoDemo项目的Issues中提出，我会及时解答。附上GreenDaoDemo的地址：<br>　　<a href="https://github.com/LeiHolmes/GreenDaoDemo" target="_blank" rel="external">GreenDaoDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;本文介绍&quot;&gt;&lt;a href=&quot;#本文介绍&quot; class=&quot;headerlink&quot; title=&quot;本文介绍&quot;&gt;&lt;/a&gt;本文介绍&lt;/h3&gt;&lt;p&gt;　　上一篇讲解了GreenDao3.0如何集成环境与添加各类注解，这一篇我们来看看如何使用GreenDao实现数据库增删改查的功能，还是上一篇公司Company与雇员Employee的例子。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="GreenDao" scheme="http://LeiHolmes.github.io/tags/GreenDao/"/>
    
  </entry>
  
  <entry>
    <title>ORM框架之GreenDao3.0集成与注解(一)</title>
    <link href="http://LeiHolmes.github.io/2017/07/10/ORM%E6%A1%86%E6%9E%B6%E4%B9%8BGreenDao3.0%E9%9B%86%E6%88%90%E4%B8%8E%E6%B3%A8%E8%A7%A3(%E4%B8%80)/"/>
    <id>http://LeiHolmes.github.io/2017/07/10/ORM框架之GreenDao3.0集成与注解(一)/</id>
    <published>2017-07-09T16:00:00.000Z</published>
    <updated>2017-09-28T08:57:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GreenDao简介"><a href="#GreenDao简介" class="headerlink" title="GreenDao简介"></a>GreenDao简介</h3><p>　　GreenDao是一个将对象映射到SQLite数据库中的轻量且快速的ORM数据库框架，本文将讲解如何集成GreenDao3.0环境，如何使用GreenDao自动生成代码及注解的使用。<br>　　<a id="more"></a><br>　　<a href="http://greenrobot.org/greendao/" target="_blank" rel="external">GreenDao官网</a><br>　　<a href="https://github.com/greenrobot/greenDAO" target="_blank" rel="external">GreenDao GitHub</a></p>
<h3 id="GreenDao3-0优势"><a href="#GreenDao3-0优势" class="headerlink" title="GreenDao3.0优势"></a>GreenDao3.0优势</h3><p>　　GreenDao相较于ORMLite等其他数据库框架有以下优势：<br>　　1. 一个精简的库<br>　　2. 性能最大化<br>　　3. 内存开销最小化<br>　　4. 易于使用的 APIs<br>　　5. 对 Android 进行高度优化<br>　　而GreenDao3.0的版本主要使用注解方式定义实体类，通过gradle插件生成相应的代码。相较于3.0之前的版本集成步骤更为便捷，使用起来也更为简单。本文使用的版本为3.2.0。</p>
<h3 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h3><h4 id="项目下build-gradle"><a href="#项目下build-gradle" class="headerlink" title="项目下build.gradle"></a>项目下build.gradle</h4><p>　　GitHub中提示添加maven仓库，但是AndroidStudio项目已经默认包含了jcenter仓库，而jcenter仓库就是maven仓库的一个分支，因此不需要再添加仓库，直接添加classPath即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:2.3.2'</span></div><div class="line">        classpath <span class="string">'org.greenrobot:greendao-gradle-plugin:3.2.1'</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="app下build-gradle"><a href="#app下build-gradle" class="headerlink" title="app下build.gradle"></a>app下build.gradle</h4><p>　　在app下build.gradle文件中我们需要声明GreenDao插件，及配置GreenDao生成dao路径等信息，声明GreenDao依赖。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'org.greenrobot.greendao'</span></div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line">greendao &#123;</div><div class="line">    schemaVersion <span class="number">1</span> <span class="comment">//数据库版本号    </span></div><div class="line">    daoPackage <span class="string">'com.holmeslei.greendaodemo.database'</span> <span class="comment">//设置时生成代码的目录    </span></div><div class="line">    targetGenDir <span class="string">'src/main/java'</span> <span class="comment">//设置DaoMaster、DaoSession、Dao目录   </span></div><div class="line">    <span class="comment">//targetGenDirTest：设置生成单元测试目录    </span></div><div class="line">    <span class="comment">//generateTests：设置自动生成单元测试用例</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    ......</div><div class="line">    compile <span class="string">'org.greenrobot:greendao:3.2.0'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="初始化实体"><a href="#初始化实体" class="headerlink" title="初始化实体"></a>初始化实体</h3><h4 id="编写实体类"><a href="#编写实体类" class="headerlink" title="编写实体类"></a>编写实体类</h4><p>　　集成好使用环境后需要初始化实体，首先编写实体类。这里演示使用公司Company与雇员Employer实体例子。使用@Entity注解。莫急，注解机制在之后小节有详细讲解。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>) <span class="comment">//自增</span></div><div class="line">    <span class="keyword">private</span> Long id; <span class="comment">//主键</span></div><div class="line">    <span class="keyword">private</span> String companyName; <span class="comment">//公司名称</span></div><div class="line">    <span class="keyword">private</span> String industry; <span class="comment">//行业</span></div><div class="line">    <span class="meta">@ToMany</span>(referencedJoinProperty = <span class="string">"companyId"</span>) <span class="comment">//设置外键companyId</span></div><div class="line">    <span class="keyword">private</span> List&lt;Employee&gt; employeeList; <span class="comment">//公司与雇员建立一对多关系</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id; <span class="comment">//主键</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> companyId; <span class="comment">//指向Company主键</span></div><div class="line">    <span class="keyword">private</span> String employeeName; <span class="comment">//雇员姓名</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary; <span class="comment">//薪水</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h4><p>　　实体类与注解添加完毕后编译项目，就会为所有带注解的实体生成Dao文件，及DaoMaster与DaoSession。若未在build.gradle中配置过则默认生成目录为build/generated/source。若配置过则生成在配置的目录下。<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/GreenDao/img_build_app.png" alt="编译项目" title="">
                </div>
                <div class="image-caption">编译项目</div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="/img/GreenDao/img_generate_code.png" alt="生成代码" title="">
                </div>
                <div class="image-caption">生成代码</div>
            </figure></p>
<h4 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h4><p>　　3.0之后最大的不同就是使用的注解来配置实体类属性，便捷且灵活。下面来看一下各类注解：</p>
<h5 id="实体类注解"><a href="#实体类注解" class="headerlink" title="实体类注解"></a>实体类注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(</div><div class="line">        schema = <span class="string">"myschema"</span>,</div><div class="line">        active = <span class="keyword">true</span>,       </div><div class="line">        nameInDb = <span class="string">"AWESOME_USERS"</span>,</div><div class="line">        indexes = &#123;</div><div class="line">                <span class="meta">@Index</span>(value = <span class="string">"name DESC"</span>, unique = <span class="keyword">true</span>)</div><div class="line">        &#125;,</div><div class="line">        createInDb = <span class="keyword">false</span></div><div class="line">)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>@Entity：用于标识当前实体需要GreenDao生成代码。</li>
<li>schema：项目中存在多个Schema时，表明当前实体属于哪个Schema。</li>
<li>active：标记实体是否处于活动状态，活动状态才支持更新删除刷新等操作。</li>
<li>nameInDb：存储在数据库中的表名，不写默认与类名一致。</li>
<li>indexes：定义索引，可跨越多个列。</li>
<li>createInDb：标记创建数据库表，若有多个实体关联此表可设为false避免重复创建，默认为true。</li>
</ul>
<h5 id="属性注解"><a href="#属性注解" class="headerlink" title="属性注解"></a>属性注解</h5><ul>
<li>@Id :主键Long型，可以通过<code>@Id(autoincrement = true)</code>设置自增长。</li>
<li>@Property：设置一个非默认关系映射所对应的列名，默认是的使用字段名例如<code>@Property (nameInDb=&quot;name&quot;)</code>。</li>
<li>@NotNul：设置数据库表当前列不能为空。</li>
<li>@OrderBy：指定排序。</li>
<li>@Transient：添加此标记之后不会生成数据库表的列。</li>
<li>@Generated：为build之后GreenDao自动生成的注解，为防止重复，每一块代码生成后会加个hash作为标记。</li>
</ul>
<h5 id="索引注解"><a href="#索引注解" class="headerlink" title="索引注解"></a>索引注解</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="meta">@Index</span>(unique = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String industry;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="meta">@Unique</span> </div><div class="line">    <span class="keyword">private</span> String employeeName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>@Index：创建索引，通过设置name设置别名，设置unique添加约束。</li>
<li>@Unique：添加唯一约束与(unique = true)作用相同。</li>
</ul>
<h5 id="关系注解"><a href="#关系注解" class="headerlink" title="关系注解"></a>关系注解</h5><ul>
<li>@ToOne：定义与另一实体一对一的关联。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span> (autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> customerId;</div><div class="line">    <span class="meta">@ToOne</span>(joinProperty = <span class="string">"employeeId"</span>)</div><div class="line">    <span class="keyword">private</span> Employee employee;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String employeeName;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>@ToMany：定义与多个实体对象一对多的关联，referencedJoinProperty为外键约束。</li>
<li>@JoinProperty：标明目标属性的源属性。</li>
<li>@JoinEntity：建立表连接关系。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//第一种：Employee实体通过外键companyId指向Company实体的主键Id建立一对多关联</span></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String companyName; </div><div class="line">    <span class="keyword">private</span> String industry;</div><div class="line">    <span class="meta">@ToMany</span>(referencedJoinProperty = <span class="string">"companyId"</span>)</div><div class="line">    <span class="keyword">private</span> List&lt;Employee&gt; employeeList;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> companyId;</div><div class="line">    <span class="keyword">private</span> String employeeName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//第二种：Employee以companyId为外键，与Company非主键不为空的键employeeTag建立一对多关联。</span></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String companyName; </div><div class="line">    <span class="keyword">private</span> String industry;  </div><div class="line">    <span class="meta">@ToMany</span>(joinProperties = &#123;</div><div class="line">            <span class="meta">@JoinProperty</span>(name = <span class="string">"employeeTag"</span>, referencedName = <span class="string">"companyId"</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">private</span> List&lt;Employee&gt; employeeList;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String employeeName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</div><div class="line">    <span class="meta">@NotNull</span> </div><div class="line">    <span class="keyword">private</span> String companyId;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">//第三种：通过第三者实体类建立关联，用的较少</span></div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String employeeName;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> salary;</div><div class="line">  </div><div class="line">    <span class="meta">@ToMany</span></div><div class="line">    <span class="meta">@JoinEntity</span>(</div><div class="line">            entity = JoinEmployeeToCompany.class,</div><div class="line">            sourceProperty = <span class="string">"employeeId"</span>,</div><div class="line">            targetProperty = <span class="string">"companyId"</span></div><div class="line">    )</div><div class="line">    <span class="keyword">private</span> List&lt;Company&gt; companyList;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JoinEmployeeToCompany</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> Long employeeId;</div><div class="line">    <span class="keyword">private</span> Long companyId;</div><div class="line">&#125;</div><div class="line">  </div><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Company</span> </span>&#123;</div><div class="line">    <span class="meta">@Id</span>(autoincrement = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String companyName; </div><div class="line">    <span class="keyword">private</span> String industry;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　到此，这一篇关于GreenDao3.0的集成与注解就讲解完毕了，欢迎参看下一篇关于如何使用GreenDao3.0对数据库进行增删改查。<br>　　技术渣一枚，有写的不对的地方欢迎大神们留言指正，有什么疑惑或者不懂的地方也可以在我Github上GreenDaoDemo项目的Issues中提出，我会及时解答。附上GreenDaoDemo的地址：<br>　　<a href="https://github.com/LeiHolmes/GreenDaoDemo" target="_blank" rel="external">GreenDaoDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;GreenDao简介&quot;&gt;&lt;a href=&quot;#GreenDao简介&quot; class=&quot;headerlink&quot; title=&quot;GreenDao简介&quot;&gt;&lt;/a&gt;GreenDao简介&lt;/h3&gt;&lt;p&gt;　　GreenDao是一个将对象映射到SQLite数据库中的轻量且快速的ORM数据库框架，本文将讲解如何集成GreenDao3.0环境，如何使用GreenDao自动生成代码及注解的使用。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="GreenDao" scheme="http://LeiHolmes.github.io/tags/GreenDao/"/>
    
  </entry>
  
  <entry>
    <title>DataBinding数据绑定基本讲解</title>
    <link href="http://LeiHolmes.github.io/2017/05/15/DataBinding%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E5%9F%BA%E6%9C%AC%E8%AE%B2%E8%A7%A3/"/>
    <id>http://LeiHolmes.github.io/2017/05/15/DataBinding数据绑定基本讲解/</id>
    <published>2017-05-14T16:00:00.000Z</published>
    <updated>2017-09-28T08:56:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DataBinding简介"><a href="#DataBinding简介" class="headerlink" title="DataBinding简介"></a>DataBinding简介</h3><p>　　DataBinding是基于MVVM思想实现数据与UI绑定的框架，有了Data Binding，在Android中也可以很方便的实现MVVM。它于2015年7月由Google在Studio1.3上引入，2016年4月在Studio2.0上得到正式支持。DataBinding是一个support库，最低支持到Android2.1（API Level 7+）。<br><a id="more"></a><br>　　在引入DataBinding之前，我们需要敲很多很鸡肋的代码，如 findViewById()、setText()，setVisibility()，setEnabled() 或 setOnClickListener() 等，通过 DataBinding , 我们可以通过声明式布局以精简的代码来绑定应用程序逻辑和布局，这样就不用编写大量的冗余的代码了。这一节我们来讲一讲DataBinding的基本实现之常量绑定、变量绑定与事件绑定。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="在build-gradle中添加"><a href="#在build-gradle中添加" class="headerlink" title="在build.gradle中添加"></a>在build.gradle中添加</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    dataBinding &#123;</div><div class="line">        enabled = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    ......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="在xml文件最外层结构添加"><a href="#在xml文件最外层结构添加" class="headerlink" title="在xml文件最外层结构添加"></a>在xml文件最外层结构添加</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span>&gt;</div><div class="line">    ......</div><div class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></div></pre></td></tr></table></figure>
<p>　　即是将最外层标签改为<code>&lt;layout&gt;&lt;/layout&gt;</code>   </p>
<h4 id="替换原setContentView方法"><a href="#替换原setContentView方法" class="headerlink" title="替换原setContentView方法"></a>替换原setContentView方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ActivityMainBinding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_main);</div></pre></td></tr></table></figure>
<p>　　<strong>命名规则</strong>：这里的ActivityMainBinding命名由来是其layout名称转换为驼峰形式再加上”Binding得到”。例如activity_main-&gt;ActivityMainBinding。</p>
<h3 id="开始绑定"><a href="#开始绑定" class="headerlink" title="开始绑定"></a>开始绑定</h3><h4 id="常量绑定"><a href="#常量绑定" class="headerlink" title="常量绑定"></a>常量绑定</h4><p>　　在xml中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/text_view1"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure></p>
<p>　　在Activity中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">binding.textView1.setText(<span class="string">"Helloworld"</span>);</div></pre></td></tr></table></figure></p>
<p>　　<strong>命名规则</strong>：控件id带下划线时，调用时使用其id的驼峰命名形式 。不带下划线时，调用时与id一致。例如id为text_view1，调用时使用binding.textView1。</p>
<h4 id="变量绑定"><a href="#变量绑定" class="headerlink" title="变量绑定"></a>变量绑定</h4><p>　　首先创建一个简单的数据来源类MyBean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.sherlock.databindingdemo;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyBean</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　然后在xml文件layout标签下添加：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">        <span class="attr">name</span>=<span class="string">"mybean"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"com.sherlock.databindingdemo.MyBean"</span> /&gt; </div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--name：提供数据的bean的别名；type：bean的类名--&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　在控件中设置变量绑定：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/text_view1"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_marginRight</span>=<span class="string">"10dp"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"@&#123;mybean.name&#125;"</span>/&gt;</div></pre></td></tr></table></figure></p>
<p>　　在Activity中设置数据：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">binding.setMybean(myBean);</div><div class="line"><span class="comment">//binding.setVariable(BR.mybean,myBean);		//另一种方法</span></div></pre></td></tr></table></figure></p>
<p>　　<strong>注意</strong>：<code>@{mybean.name}</code>中的name必须为String类型，若要绑定别的类型，比如int类型，可以这样<code>@{String.valueOf(mybean.age)}</code>。</p>
<h4 id="事件绑定"><a href="#事件绑定" class="headerlink" title="事件绑定"></a>事件绑定</h4><p>　　当然我们也可以用DataBinding实现事件绑定，它有两种实现方式。<br>　　<strong>第一种</strong>：首先添加一个事件回调类Presenter，这里演示Click与TextChange事件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Presenter</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">        myBean.setName(s.toString());</div><div class="line">        binding.setMybean(myBean);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span></span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>注意</strong>：使用这种事件绑定方式，Presenter中的方法需和控件监听方法完全一致。<br>　　在xml中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">variable</span></span></div><div class="line">        <span class="attr">name</span>=<span class="string">"presenter"</span></div><div class="line">        <span class="attr">type</span>=<span class="string">"com.sherlock.databindingdemo.MainActivity.Presenter"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">EditText</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:onTextChanged</span>=<span class="string">"@&#123;presenter.onTextChanged&#125;"</span> /&gt;</div><div class="line">    <span class="comment">&lt;!--或者@&#123;presenter::onTextChanged&#125;--&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:onClick</span>=<span class="string">"@&#123;presenter.onClick&#125;"</span> /&gt;</div><div class="line">    <span class="comment">&lt;!--或者@&#123;presenter::onClick&#125;--&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　在Activity中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">binding.setPresenter(<span class="keyword">new</span> Presenter());</div></pre></td></tr></table></figure></p>
<p>　　<strong>第二种</strong>：也可以设置自定义的监听器Binding，可回传参数，需要使用Lambda表达式：<br>　　在xml中：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:onClick</span>=<span class="string">"@&#123;() -&gt; presenter.onButtonClick(mybean)&#125;"</span> /&gt;</div><div class="line">    <span class="comment">&lt;!--或者@&#123;(view) -&gt; presenter.onButtonClick(mybean)&#125;--&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　在Presenter中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonClick</span><span class="params">(MyBean myBean)</span></span>&#123;</div><div class="line">    Toast.makeText(MainActivity.<span class="keyword">this</span>, myBean.getName(), Toast.LENGTH_SHORT).show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　<strong>注意</strong>：使用这种事件绑定，Presenter中的监听方法就不需要与View的监听方法完全一致了，而且可以获取View在事件中回传的数据。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　这一节到此DataBinding的常量，变量，事件绑定的用法就讲解完毕了，实际操作起来感觉目前AndroidStudio对DataBinding的支持还不够，排错有点费劲，有时会出现找不到DataBinding的错误，这时应先查看下是否由于自己修改了某个类名，而xml调用时没有修改导致。若没有问题则删除app下的build文件夹重新Rebuild下项目试试。<br>　　首次接触DataBinding，可能有写的不对的地方欢迎大神们留言指正，有什么疑惑或者不懂的地方也可以在我Github上DataBindingDemo项目的Issues中提出，我会及时解答。附上DataBindingDemo地址：<br>　　<a href="https://github.com/LeiHolmes/DataBindingDemo" target="_blank" rel="external">DataBindingDemo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;DataBinding简介&quot;&gt;&lt;a href=&quot;#DataBinding简介&quot; class=&quot;headerlink&quot; title=&quot;DataBinding简介&quot;&gt;&lt;/a&gt;DataBinding简介&lt;/h3&gt;&lt;p&gt;　　DataBinding是基于MVVM思想实现数据与UI绑定的框架，有了Data Binding，在Android中也可以很方便的实现MVVM。它于2015年7月由Google在Studio1.3上引入，2016年4月在Studio2.0上得到正式支持。DataBinding是一个support库，最低支持到Android2.1（API Level 7+）。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="DataBinding" scheme="http://LeiHolmes.github.io/tags/DataBinding/"/>
    
  </entry>
  
  <entry>
    <title>Material Design之RecyclerView基本讲解与瀑布流的实现</title>
    <link href="http://LeiHolmes.github.io/2017/03/28/Material%20Design%E4%B9%8BRecyclerView%E5%9F%BA%E6%9C%AC%E8%AE%B2%E8%A7%A3%E4%B8%8E%E7%80%91%E5%B8%83%E6%B5%81%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://LeiHolmes.github.io/2017/03/28/Material Design之RecyclerView基本讲解与瀑布流的实现/</id>
    <published>2017-03-27T16:00:00.000Z</published>
    <updated>2017-09-28T08:57:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RecyclerView简介"><a href="#RecyclerView简介" class="headerlink" title="RecyclerView简介"></a>RecyclerView简介</h3><p>　　RecyclerView是一种新的视图组，目标是为任何基于适配器的视图提供相似的渲染方式。它被作为ListView和GridView控件的继承者，具有更优的灵活性与可替代性。在最新的support-v7版本中提供支持。本文将讲解RecyclerView的简单实现，添加删除条目，点击事件添加与瀑布流的实现。<br><a id="more"></a>  </p>
<h3 id="相关原理与简单实现"><a href="#相关原理与简单实现" class="headerlink" title="相关原理与简单实现"></a>相关原理与简单实现</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>　　在AndroidStudio的build.gradle中添加依赖：  </p>
<pre><code class="xml">dependencies {
    ...
    compile &#39;com.android.support:recyclerview-v7:25.3.0&#39;
}
</code></pre>
<h4 id="在布局中使用"><a href="#在布局中使用" class="headerlink" title="在布局中使用"></a>在布局中使用</h4><p>　　添加完依赖后就可以在布局中使用RecyclerView了：  </p>
<pre><code class="xml"><span class="tag">&lt;<span class="name">android.support.v7.widget.RecyclerView</span>
    <span class="attr">android:id</span>=<span class="string">"@+id/main_recyclerview"</span>
    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>
    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span> /&gt;</span>
</code></pre>
<h4 id="RecyclerView-Adapter"><a href="#RecyclerView-Adapter" class="headerlink" title="RecyclerView.Adapter"></a>RecyclerView.Adapter</h4><p>　　RecyclerView封装了一种新型的适配器，与现在使用的适配器大同小异。它强制用户使用RecyclerView提供的ViewHolder，使用时主要需要重写onCreateViewHolder与onBindViewHolder方法。前者用来展现视图及其持有者，且只有真正需要一个新view时才会被回调，不需要检查是否已经被回收。后者用来绑定数据到View上。  </p>
<pre><code class="java"><span class="keyword">import</span> android.content.Context;
<span class="keyword">import</span> android.support.v7.widget.RecyclerView;
<span class="keyword">import</span> android.view.LayoutInflater;
<span class="keyword">import</span> android.view.View;
<span class="keyword">import</span> android.view.ViewGroup;
<span class="keyword">import</span> android.widget.TextView;
<span class="keyword">import</span> java.util.List;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>{
    <span class="keyword">private</span> Context context;
    <span class="keyword">private</span> List&lt;String&gt; list;
    <span class="keyword">private</span> LayoutInflater inflater;

    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(Context context, List&lt;String&gt; list)</span> </span>{
        <span class="keyword">this</span>.context = context;
        <span class="keyword">this</span>.list = list;
        inflater = LayoutInflater.from(context);
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>{
        View view = inflater.inflate(R.layout.item_recyclerview, parent, <span class="keyword">false</span>);
        MyViewHolder holder = <span class="keyword">new</span> MyViewHolder(view);
        <span class="keyword">return</span> holder;
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>{
        holder.textView.setText(list.get(position));
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> list.size();
    }

    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>{
        TextView textView;
        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View itemView)</span> </span>{
            <span class="keyword">super</span>(itemView);
            textView = (TextView) itemView.findViewById(R.id.item_textview);
        }
    }
}
</code></pre>
<h4 id="LayoutManager"><a href="#LayoutManager" class="headerlink" title="LayoutManager"></a>LayoutManager</h4><p>　　RecyclerView通过布局管理器LayoutManager控制每一个item如何进行排列摆放，何时展示和隐藏。回收或重用一个View时LayoutManager会向适配器请求新的数据来替换旧的数据，这种机制避免了创建过多的View和频繁的调用findViewById方法，目前其自带的主要有以下三种：<br>　　- LinearLayoutManager：ListView样式<br>　　- GridLayoutManager：GridView样式<br>　　- StaggeredGridLayoutManager：瀑布流样式  </p>
<h4 id="ItemDecoration"><a href="#ItemDecoration" class="headerlink" title="ItemDecoration"></a>ItemDecoration</h4><p>　　RecyclerView并不能像ListView一样直接在xml布局中修改item分割线样式。需要在Activity动态设置，当然更推荐在单个条目布局中设置margin或者padding来实现分割线效果，这里提供一个分割线。  </p>
<pre><code class="java"><span class="keyword">import</span> android.content.Context;
<span class="keyword">import</span> android.content.res.TypedArray;
<span class="keyword">import</span> android.graphics.Canvas;
<span class="keyword">import</span> android.graphics.Rect;
<span class="keyword">import</span> android.graphics.drawable.Drawable;
<span class="keyword">import</span> android.support.v7.widget.LinearLayoutManager;
<span class="keyword">import</span> android.support.v7.widget.RecyclerView;
<span class="keyword">import</span> android.view.View;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>{
    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = <span class="keyword">new</span> <span class="keyword">int</span>[]{
            android.R.attr.listDivider
    };
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HORIZONTAL_LIST = LinearLayoutManager.HORIZONTAL;
    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERTICAL_LIST = LinearLayoutManager.VERTICAL;
    <span class="keyword">private</span> Drawable mDivider;
    <span class="keyword">private</span> <span class="keyword">int</span> mOrientation;

    <span class="function"><span class="keyword">public</span> <span class="title">DividerItemDecoration</span><span class="params">(Context context, <span class="keyword">int</span> orientation)</span> </span>{
        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(ATTRS);
        mDivider = a.getDrawable(<span class="number">0</span>);
        a.recycle();
        setOrientation(orientation);
    }

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> orientation)</span> </span>{
        <span class="keyword">if</span> (orientation != HORIZONTAL_LIST &amp;&amp; orientation != VERTICAL_LIST) {
            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"invalid orientation"</span>);
        }
        mOrientation = orientation;
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>{
        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) {
            drawVertical(c, parent);
        } <span class="keyword">else</span> {
            drawHorizontal(c, parent);
        }
    }

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>{
        <span class="keyword">final</span> <span class="keyword">int</span> left = parent.getPaddingLeft();
        <span class="keyword">final</span> <span class="keyword">int</span> right = parent.getWidth() - parent.getPaddingRight();
        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) {
            <span class="keyword">final</span> View child = parent.getChildAt(i);
            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child                     .getLayoutParams();
            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getBottom() + params.bottomMargin;
            <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();
            mDivider.setBounds(left, top, right, bottom);
            mDivider.draw(c);
        }
    }

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>{
        <span class="keyword">final</span> <span class="keyword">int</span> top = parent.getPaddingTop();
        <span class="keyword">final</span> <span class="keyword">int</span> bottom = parent.getHeight() - parent.getPaddingBottom();
        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) {
            <span class="keyword">final</span> View child = parent.getChildAt(i);
            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child                     .getLayoutParams();
            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getRight() + params.rightMargin;
            <span class="keyword">final</span> <span class="keyword">int</span> right = left + mDivider.getIntrinsicHeight();
            mDivider.setBounds(left, top, right, bottom);
            mDivider.draw(c);
        }
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition, RecyclerView parent)</span> </span>{
        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) {
            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());
        } <span class="keyword">else</span> {
            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);
            }
    }
}
</code></pre>
<h4 id="ItemAnimator"><a href="#ItemAnimator" class="headerlink" title="ItemAnimator"></a>ItemAnimator</h4><p>　　ItemAnimator会根据适配器上收到的通知来动画显示视图组的修改，比如item的添加与删除。DefaultItemAnimator已经能很好的展现动画效果了。  </p>
<h4 id="RecyclerView初始化"><a href="#RecyclerView初始化" class="headerlink" title="RecyclerView初始化"></a>RecyclerView初始化</h4><p>　　若想初始化一个RecyclerView使其进入工作状态，你需要在Activity中做以下的操作：  </p>
<pre><code class="java">RecyclerView recyclerView = (RecyclerView)findViewById(R.id.recycler_view_main);
MyAdapter adapter = <span class="keyword">new</span> MyAdapter(<span class="keyword">this</span>, list);
<span class="comment">//设置RecyclerView保持固定的大小</span>
recyclerView.setHasFixedSize(<span class="keyword">true</span>);
<span class="comment">//设置适配器</span>
recyclerView.setAdapter(adapter);
<span class="comment">//设置RecyclerView ListView样式布局管理</span>
recyclerView.setLayoutManager(<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>, LinearLayoutManager.VERTICAL, <span class="keyword">false</span>));
<span class="comment">//设置RecyclerView的Item分割线</span>
recyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(<span class="keyword">this</span>, DividerItemDecoration.VERTICAL_LIST));
<span class="comment">//设置RecyclerView的动画</span>
recyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());

<span class="comment">//设置RecyclerView GridView样式</span>
<span class="comment">//recyclerView.setLayoutManager(new GridLayoutManager(MainActivity.this, 3));</span>
<span class="comment">//设置RecyclerView 水平GridView样式</span>
<span class="comment">//recyclerView.setLayoutManager(new StaggeredGridLayoutManager(5, StaggeredGridLayoutManager.HORIZONTAL));</span>
<span class="comment">//设置RecyclerView 瀑布流样式</span>
<span class="comment">//recyclerView.setLayoutManager(new StaggeredGridLayoutManager(3,StaggeredGridLayoutManager.VERTICAL));</span>
</code></pre>
<h3 id="点击事件与添加删除Item"><a href="#点击事件与添加删除Item" class="headerlink" title="点击事件与添加删除Item"></a>点击事件与添加删除Item</h3><p>　　美中不足的是RecyclerView并没有提供像ListView一样的Item点击与Item长点击事件，不提供咱们就自己造，通过接口回调来实现。  </p>
<h4 id="Adapter中"><a href="#Adapter中" class="headerlink" title="Adapter中"></a>Adapter中</h4><pre><code class="java"><span class="keyword">import</span> android.content.Context;
<span class="keyword">import</span> android.support.v7.widget.RecyclerView;
<span class="keyword">import</span> android.view.LayoutInflater;
<span class="keyword">import</span> android.view.View;
<span class="keyword">import</span> android.view.ViewGroup;
<span class="keyword">import</span> android.widget.TextView;

<span class="keyword">import</span> java.util.ArrayList;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">MyViewHolder</span>&gt; </span>{
    <span class="keyword">private</span> Context context;
    <span class="keyword">private</span> LayoutInflater inflater;
    <span class="keyword">protected</span> ArrayList&lt;String&gt; datas;
    <span class="keyword">private</span> onItemClickedListener onItemClickedListener;

    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(Context context, ArrayList&lt;String&gt; datas)</span> </span>{
        <span class="keyword">this</span>.context = context;
        <span class="keyword">this</span>.datas = datas;
        inflater = LayoutInflater.from(context);
    }

    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickedListener</span><span class="params">(MyAdapter.onItemClickedListener onItemClickedListener)</span> </span>{
        <span class="keyword">this</span>.onItemClickedListener = onItemClickedListener;
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>{
        holder.textView.setText(datas.get(position));
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>{
    View view = inflater.inflate(R.layout.item_recycler_view, parent, <span class="keyword">false</span>);
        MyViewHolder myViewHolder = <span class="keyword">new</span> MyViewHolder(view);
        <span class="keyword">return</span> myViewHolder;
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>{
        <span class="keyword">return</span> datas.size();
    }

   <span class="comment">/**
    * 添加条目
    */</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{
        datas.add(position, <span class="string">"xulei"</span>);
    <span class="comment">//        notifyDataSetChanged();</span>
        notifyItemInserted(position);<span class="comment">//调用这个才有动画效果</span>
    }

   <span class="comment">/**
    * 移除条目
    */</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>{
        datas.remove(position);
        notifyItemRemoved(position);
    }

    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>{
        TextView textView;

        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View itemView)</span> </span>{
            <span class="keyword">super</span>(itemView);
            <span class="comment">//初始化控件</span>
            textView = (TextView) itemView.findViewById(R.id.item_textview);
            <span class="comment">//设置当前条目单击监听</span>
            itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() {
                <span class="meta">@Override</span>
                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>{
                    <span class="keyword">if</span> (onItemClickedListener != <span class="keyword">null</span>)
                        onItemClickedListener.onClick(view, getAdapterPosition());<span class="comment">//可立刻获取到当前position</span>
<span class="comment">//                        onItemClickedListener.onClick(view, getLayoutPosition());//需等当前视图更新完才能获取到当前position，&lt;16ms。</span>
                }
            });
            <span class="comment">//设置当前条目长按监听</span>
            itemView.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() {
                <span class="meta">@Override</span>
                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View view)</span> </span>{
                    <span class="keyword">if</span> (onItemClickedListener != <span class="keyword">null</span>)
                        onItemClickedListener.onLongClick(view, getAdapterPosition());
                    <span class="keyword">return</span> <span class="keyword">false</span>;
                }
            });
        }
    }

   <span class="comment">/**
    * 点击回调的接口
    */</span>
    <span class="class"><span class="keyword">interface</span> <span class="title">onItemClickedListener</span> </span>{
        <span class="function"><span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;

        <span class="function"><span class="keyword">void</span> <span class="title">onLongClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span></span>;
    }
}
</code></pre>
<h4 id="Activity中"><a href="#Activity中" class="headerlink" title="Activity中"></a>Activity中</h4><p>　　在Activity中实例化Adapter之后添加如下代码：</p>
<pre><code class="java">adapter.setOnItemClickedListener(<span class="keyword">new</span> MyAdapter.onItemClickedListener() {
    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>{
        adapter.addItem(position);
        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"点击click:"</span> + position, Toast.LENGTH_SHORT).show();
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLongClick</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>{
        adapter.removeItem(position);
        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"长按click:"</span> + position, Toast.LENGTH_SHORT).show();
    }
});
</code></pre>
<h3 id="瀑布流的实现"><a href="#瀑布流的实现" class="headerlink" title="瀑布流的实现"></a>瀑布流的实现</h3><p>　　想实现瀑布流的样式通过使用RecyclerView也很容易就能实现。</p>
<h4 id="首先在Activity中设置LayoutManager时选择："><a href="#首先在Activity中设置LayoutManager时选择：" class="headerlink" title="首先在Activity中设置LayoutManager时选择："></a>首先在Activity中设置LayoutManager时选择：</h4><pre><code class="java">recyclerView.setLayoutManager(<span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">3</span>,StaggeredGridLayoutManager.VERTICAL));
</code></pre>
<h4 id="修改Adapter"><a href="#修改Adapter" class="headerlink" title="修改Adapter"></a>修改Adapter</h4><p>　　瀑布流自然是每个条目的高度不同才能出现瀑布的效果（水平布局则是宽度不同），那么只需在每个条目绑定数据时动态改变下其高度即可，贴出瀑布流Adapter代码：</p>
<pre><code class="java"><span class="keyword">import</span> android.content.Context;
<span class="keyword">import</span> android.view.ViewGroup;

<span class="keyword">import</span> java.util.ArrayList;
<span class="keyword">import</span> java.util.List;

<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaggerAdapter</span> <span class="keyword">extends</span> <span class="title">MyAdapter</span> </span>{
    <span class="keyword">private</span> List&lt;Integer&gt; heights;
    <span class="function"><span class="keyword">public</span> <span class="title">StaggerAdapter</span><span class="params">(Context context, ArrayList&lt;String&gt; datas)</span> </span>{
        <span class="keyword">super</span>(context, datas);
        heights = <span class="keyword">new</span> ArrayList&lt;&gt;();
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; datas.size(); i++) {
            heights.add((<span class="keyword">int</span>) (<span class="number">100</span> + Math.random() * <span class="number">300</span>));
        }
    }

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>{
        ViewGroup.LayoutParams layoutParams = holder.itemView.getLayoutParams();
        layoutParams.height = heights.get(position);
<span class="comment">//        layoutParams.width = heights.get(position);</span>
        holder.itemView.setLayoutParams(layoutParams);
        holder.textView.setText(datas.get(position));
    }
}
</code></pre>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　通过实践发现RecyclerView相较于ListView与GridView确实强大很多，更加的灵活与方便，提高了开发效率。但也有不足之处，如并未封装点击事件的回调，确实是比较头疼。期待Google的完善。<br>附上GitHub源码：<br><a href="https://github.com/ShylockXu/RecyclerViewDemo" target="_blank" rel="external">RecyclerViewDemo</a><br><a href="https://github.com/ShylockXu/RecyclerViewDevelop" target="_blank" rel="external">RecyclerViewDevelop</a>  </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RecyclerView简介&quot;&gt;&lt;a href=&quot;#RecyclerView简介&quot; class=&quot;headerlink&quot; title=&quot;RecyclerView简介&quot;&gt;&lt;/a&gt;RecyclerView简介&lt;/h3&gt;&lt;p&gt;　　RecyclerView是一种新的视图组，目标是为任何基于适配器的视图提供相似的渲染方式。它被作为ListView和GridView控件的继承者，具有更优的灵活性与可替代性。在最新的support-v7版本中提供支持。本文将讲解RecyclerView的简单实现，添加删除条目，点击事件添加与瀑布流的实现。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="RecyclerView" scheme="http://LeiHolmes.github.io/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>AlarmManager+Notification实现定时通知提醒功能</title>
    <link href="http://LeiHolmes.github.io/2016/12/13/AlarmManager+Notification%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E9%80%9A%E7%9F%A5%E6%8F%90%E9%86%92%E5%8A%9F%E8%83%BD/"/>
    <id>http://LeiHolmes.github.io/2016/12/13/AlarmManager+Notification实现定时通知提醒功能/</id>
    <published>2016-12-12T16:00:00.000Z</published>
    <updated>2017-09-28T08:56:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AlarmManager简介"><a href="#AlarmManager简介" class="headerlink" title="AlarmManager简介"></a>AlarmManager简介</h3><p>　　AlarmManager实质是一个全局的定时器，是Android中常用的一种系统级别的提示服务，在指定时间或周期性启动其它组件（包括Activity,Service,BroadcastReceiver）。本文将讲解一下如何使用AlarmManager实现定时提醒功能。<br><a id="more"></a></p>
<h3 id="闹钟配置"><a href="#闹钟配置" class="headerlink" title="闹钟配置"></a>闹钟配置</h3><h4 id="周期闹钟"><a href="#周期闹钟" class="headerlink" title="周期闹钟"></a>周期闹钟</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent();</div><div class="line">intent.setAction(GlobalValues.TIMER_ACTION_REPEATING);</div><div class="line">PendingIntent sender = PendingIntent.getBroadcast(context, <span class="number">0</span>, intent, <span class="number">0</span>);</div><div class="line">AlarmManager alarm = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);</div><div class="line">alarm.setRepeating(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + <span class="number">5</span> * <span class="number">1000</span>, <span class="number">3</span> * <span class="number">1000</span>, sender);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setRepeating(<span class="keyword">int</span> type,<span class="keyword">long</span> startTime,<span class="keyword">long</span> intervalTime,PendingIntent pi)</div></pre></td></tr></table></figure>
<p>　　该方法用于设置周期性执行的定时服务。type：闹钟类型，startTime：闹钟首次执行时间，intervalTime：闹钟两次执行的间隔时间，pi：闹钟响应动作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setInexactRepeating(<span class="keyword">int</span> type,<span class="keyword">long</span> startTime,<span class="keyword">long</span> intervalTime,PendingIntent pi)</div></pre></td></tr></table></figure></p>
<p>　　该方法也用于设置周期定式服务，与上一种类似。不过其两个闹钟执行的间隔时间不是固定的。它相对而言更省电一些，因为系统可能会将几个差不多的闹钟合并为一个来执行，减少设备的唤醒次数。  </p>
<h5 id="intervalTime内置变量"><a href="#intervalTime内置变量" class="headerlink" title="intervalTime内置变量"></a>intervalTime内置变量</h5><p>间隔一天： 　　INTERVAL_DAY<br>间隔半天： 　　INTERVAL_HALF_DAY<br>间隔15分钟： 　INTERVAL_FIFTEEN_MINUTES<br>间隔半个小时： INTERVAL_HALF_HOUR<br>间隔一个小时： INTERVAL_HOUR  </p>
<h4 id="定时闹钟"><a href="#定时闹钟" class="headerlink" title="定时闹钟"></a>定时闹钟</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获得系统提供的AlarmManager服务的对象</span></div><div class="line">AlarmManager alarm = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);</div><div class="line"><span class="comment">//Intent设置要启动的组件，这里启动广播</span></div><div class="line">Intent myIntent = <span class="keyword">new</span> Intent();</div><div class="line">myIntent.setAction(GlobalValues.TIMER_ACTION);</div><div class="line"><span class="comment">//PendingIntent对象设置动作,启动的是Activity还是Service,或广播!</span></div><div class="line">PendingIntent sender = PendingIntent.getBroadcast(context, <span class="number">0</span>, myIntent,<span class="number">0</span>);</div><div class="line"><span class="comment">//注册闹钟</span></div><div class="line">alarm.set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis() + <span class="number">5</span> * <span class="number">1000</span>, sender);</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set(<span class="keyword">int</span> type,<span class="keyword">long</span> startTime,PendingIntent pi)</div></pre></td></tr></table></figure>
<p>　　该方法用于设置一次性定时服务。type：闹钟类型，startTime：闹钟执行时间，pi：闹钟响应动作。  </p>
<h4 id="取消闹钟"><a href="#取消闹钟" class="headerlink" title="取消闹钟"></a>取消闹钟</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Intent myIntent = <span class="keyword">new</span> Intent();</div><div class="line">myIntent.setAction(GlobalValues.TIMER_ACTION);</div><div class="line"><span class="comment">//myIntent.setAction(GlobalValues.TIMER_ACTION_REPEATING);</span></div><div class="line">PendingIntent sender = PendingIntent.getBroadcast(context, <span class="number">0</span>, myIntent,<span class="number">0</span>);</div><div class="line">AlarmManager alarm = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);</div><div class="line">alarm.cancel(sender);</div></pre></td></tr></table></figure>
<h4 id="设置多个闹钟："><a href="#设置多个闹钟：" class="headerlink" title="设置多个闹钟："></a>设置多个闹钟：</h4><p>　　若连续设置多个闹钟，则只有最后一个闹钟会生效，那么这种情况我们怎么处理呢？其实很简单。我们可以给每个闹钟设置唯一的id，传入getBroadcast()第二个参数。在这里我是每设置一个id则自增1存入Shareprefrence里，保证id唯一性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//给每个闹钟设置不同ID防止覆盖</span></div><div class="line"><span class="keyword">int</span> alarmId = SharedPreUtils.getInteger(context, <span class="string">"alarm_id"</span>, <span class="number">0</span>);</div><div class="line">SharedPreUtils.setInteger(context, <span class="string">"alarm_id"</span>, ++alarmId);</div><div class="line">PendingIntent sender = PendingIntent.getBroadcast(context, alarmId, myIntent, <span class="number">0</span>);</div></pre></td></tr></table></figure></p>
<p>　　在取消闹钟时我们也可以根据这个id关闭不同的闹钟。  </p>
<h4 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h4><h5 id="type：闹钟类型"><a href="#type：闹钟类型" class="headerlink" title="type：闹钟类型"></a>type：闹钟类型</h5><p>ELAPSED_REALTIME：<br>　　在指定的延时过后，发送广播，但不唤醒设备（闹钟在睡眠状态下不可用）。如果在系统休眠时闹钟触发，它将不会被传递，直到下一次设备唤醒。<br>ELAPSED_REALTIME_WAKEUP：<br>　　在指定的延时过后，发送广播，并唤醒设备（即使关机也会执行operation所对应的组件） 。延时是要把系统启动的时间<code>SystemClock.elapsedRealtime()</code>算进去的。<br>RTC：<br>　　指定当系统调用<code>System.currentTimeMillis()</code>方法返回的值与triggerAtTime相等时启动operation所对应的设备（在指定的时刻，发送广播，但不唤醒设备）。如果在系统休眠时闹钟触发，它将不会被传递，直到下一次设备唤醒（闹钟在睡眠状态下不可用）。<br>RTC_WAKEUP：<br>　　指定当系统调用<code>System.currentTimeMillis()</code>方法返回的值与triggerAtTime相等时启动operation所对应的设备（在指定的时刻，发送广播，并唤醒设备）。即使系统关机也会执行operation所对应的组件。<br>POWER_OFF_WAKEUP：<br>　　表示闹钟在手机关机状态下也能正常进行提示功能，所以是5个状态中用的最多的状态之一，该状态下闹钟也是用绝对时间，状态值为4；不过本状态好像受SDK版本影响，某些版本并不支持。  </p>
<h5 id="long-intervalTime：执行时间"><a href="#long-intervalTime：执行时间" class="headerlink" title="long intervalTime：执行时间"></a>long intervalTime：执行时间</h5><p>　　闹钟的第一次执行时间，以毫秒为单位，可以自定义时间，不过一般使用当前时间。需要注意的是，本属性与第一个属性（type）密切相关，如果第一个参数对应的闹钟使用的是相对时间（ELAPSED_REALTIME和ELAPSED_REALTIME_WAKEUP），那么本属性就得使用相对时间（相对于系统启动时间来说），比如当前时间就表示为：<code>SystemClock.elapsedRealtime();</code>如果第一个参数对应的闹钟使用的是绝对时间（RTC、RTC_WAKEUP、POWER_OFF_WAKEUP），那么本属性就得使用绝对时间，比如当前时间就表示为：<code>System.currentTimeMillis()</code>  </p>
<h5 id="long-startTime：间隔时间"><a href="#long-startTime：间隔时间" class="headerlink" title="long startTime：间隔时间"></a>long startTime：间隔时间</h5><p>　　对于周期定时方式来说，存在本属性，表示两次闹钟执行的间隔时间，也是以毫秒为单位。</p>
<h5 id="PendingIntent-pi：执行动作"><a href="#PendingIntent-pi：执行动作" class="headerlink" title="PendingIntent pi：执行动作"></a>PendingIntent pi：执行动作</h5><p>　　是闹钟的执行动作，比如发送一个广播、给出提示等等。PendingIntent是Intent的封装类。需要注意的是，如果是通过启动服务来实现闹钟提示的话，PendingIntent对象的获取就应该采用<code>Pending.getService(Context c,int i,Intent intent,int j)</code>方法；如果是通过广播来实现闹钟提示的话，PendingIntent对象的获取就应该采<code>用PendingIntent.getBroadcast(Context c,int i,Intent intent,int j)</code>方法；如果是采用Activity的方式来实现闹钟提示的话，PendingIntent对象的获取就应该采用<code>PendingIntent.getActivity(Context c,int i,Intent intent,int j)</code>方法。如果这三种方法错用了的话，虽然不会报错，但是看不到闹钟提示效果。。</p>
<h3 id="广播配置"><a href="#广播配置" class="headerlink" title="广播配置"></a>广播配置</h3><h4 id="新建闹钟BroadCastReceiver："><a href="#新建闹钟BroadCastReceiver：" class="headerlink" title="新建闹钟BroadCastReceiver："></a>新建闹钟BroadCastReceiver：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> NotificationManager m_notificationMgr = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOTIFICATION_FLAG = <span class="number">3</span>;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">        m_notificationMgr = (NotificationManager) context.getSystemService(Context.<span class="function">NOTIFICATION_SERVIC</span></div><div class="line">        <span class="title">if</span> <span class="params">(intent.getAction()</span>.<span class="title">equals</span><span class="params">(GlobalValues.TIMER_ACTION_REPEATING)</span>) &#123;</div><div class="line">            Log.e(<span class="string">"alarm_receiver"</span>, <span class="string">"周期闹钟"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (intent.getAction().equals(GlobalValues.TIMER_ACTION)) &#123;</div><div class="line">            Log.e(<span class="string">"alarm_receiver"</span>, <span class="string">"定时闹钟"</span>);</div><div class="line">                        Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.logo);</div><div class="line">            Intent intent1 = <span class="keyword">new</span> Intent(context, WriteDiaryActivity.class);</div><div class="line">            PendingIntent pendingIntent = PendingIntent.getActivity(context, <span class="number">0</span>, intent1, <span class="number">0</span>);</div><div class="line">            Notification notify = <span class="keyword">new</span> Notification.Builder(context)</div><div class="line">                    .setSmallIcon(R.drawable.logo) <span class="comment">// 设置状态栏中的小图片，尺寸一般建议在24×24</span></div><div class="line">                    .setLargeIcon(bitmap) <span class="comment">// 这里也可以设置大图标</span></div><div class="line">                    .setTicker(<span class="string">"亲情日历"</span>) <span class="comment">// 设置显示的提示文字</span></div><div class="line">                    .setContentTitle(<span class="string">"亲情日历"</span>) <span class="comment">// 设置显示的标题</span></div><div class="line">                    .setContentText(<span class="string">"您有日记提醒哦"</span>) <span class="comment">// 消息的详细内容</span></div><div class="line">                    .setContentIntent(pendingIntent) <span class="comment">// 关联PendingIntent</span></div><div class="line">                    .setNumber(<span class="number">1</span>) <span class="comment">// 在TextView的右方显示的数字，可以在外部定义一个变量，点击累加setNumber(count),这时显示的和</span></div><div class="line">                    .getNotification(); <span class="comment">// 需要注意build()是在API level16及之后增加的，在API11中可以使用getNotificatin()来</span></div><div class="line">            notify.flags |= Notification.FLAG_AUTO_CANCEL;</div><div class="line">            NotificationManager manager = (NotificationManager) context.getSystemService(Context.NOTIF</div><div class="line">            manager.notify(NOTIFICATION_FLAG, notify);</div><div class="line">            bitmap.recycle(); <span class="comment">//回收bitmap</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="注册BroadCastReceiver："><a href="#注册BroadCastReceiver：" class="headerlink" title="注册BroadCastReceiver："></a>注册BroadCastReceiver：</h4><p>　　最后别忘了在清单里注册广播。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--闹钟接收广播--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">".util.service.AlarmReceiver"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.e_eduspace.TIMER_ACTION_REPEATING"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.e_eduspace.TIMER_ACTION"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h3><h4 id="常量："><a href="#常量：" class="headerlink" title="常量："></a>常量：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalValues</span> </span>&#123;</div><div class="line">    <span class="comment">// 周期性的闹钟</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String TIMER_ACTION_REPEATING = <span class="string">"com.e_eduspace.TIMER_ACTION_REPEATING"</span>;</div><div class="line">    <span class="comment">// 定时闹钟</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String TIMER_ACTION = <span class="string">"com.e_eduspace.TIMER_ACTION"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.e_eduspace.familycalendar.util;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.app.AlarmManager;</div><div class="line"><span class="keyword">import</span> android.app.PendingIntent;</div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.Intent;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.prolificinteractive.materialcalendarview.CalendarDay;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 闹钟定时工具类</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> xulei</div><div class="line"> * <span class="doctag">@time</span> 2016/12/13 10:03</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlarmTimer</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置周期性闹钟</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@param</span> firstTime</div><div class="line">     * <span class="doctag">@param</span> cycTime</div><div class="line">     * <span class="doctag">@param</span> action</div><div class="line">     * <span class="doctag">@param</span> AlarmManagerType 闹钟的类型，常用的有5个值：AlarmManager.ELAPSED_REALTIME、</div><div class="line">     *                         AlarmManager.ELAPSED_REALTIME_WAKEUP、AlarmManager.RTC、</div><div class="line">     *                         AlarmManager.RTC_WAKEUP、AlarmManager.POWER_OFF_WAKEUP</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setRepeatingAlarmTimer</span><span class="params">(Context context, <span class="keyword">long</span> firstTime,</span></span></div><div class="line">                                              <span class="keyword">long</span> cycTime, String action, <span class="keyword">int</span> AlarmManagerType) &#123;</div><div class="line">        Intent myIntent = <span class="keyword">new</span> Intent();</div><div class="line">        myIntent.setAction(action);</div><div class="line">        PendingIntent sender = PendingIntent.getBroadcast(context, <span class="number">0</span>, myIntent, <span class="number">0</span>);</div><div class="line">        AlarmManager alarm = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);</div><div class="line">        alarm.setRepeating(AlarmManagerType, firstTime, cycTime, sender);</div><div class="line">        <span class="comment">//param1：闹钟类型，param1：闹钟首次执行时间，param1：闹钟两次执行的间隔时间，param1：闹钟响应动作。</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置定时闹钟</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@param</span> cycTime</div><div class="line">     * <span class="doctag">@param</span> action</div><div class="line">     * <span class="doctag">@param</span> AlarmManagerType 闹钟的类型，常用的有5个值：AlarmManager.ELAPSED_REALTIME、</div><div class="line">     *                         AlarmManager.ELAPSED_REALTIME_WAKEUP、AlarmManager.RTC、</div><div class="line">     *                         AlarmManager.RTC_WAKEUP、AlarmManager.POWER_OFF_WAKEUP</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAlarmTimer</span><span class="params">(Context context, <span class="keyword">long</span> cycTime,</span></span></div><div class="line">                                     String action, <span class="keyword">int</span> AlarmManagerType, CalendarDay date) &#123;</div><div class="line">        Intent myIntent = <span class="keyword">new</span> Intent();</div><div class="line">        <span class="comment">//传递定时日期</span></div><div class="line">        myIntent.putExtra(<span class="string">"date"</span>, date);</div><div class="line">        myIntent.setAction(action);</div><div class="line">        <span class="comment">//给每个闹钟设置不同ID防止覆盖</span></div><div class="line">        <span class="keyword">int</span> alarmId = SharedPreUtils.getInteger(context, <span class="string">"alarm_id"</span>, <span class="number">0</span>);</div><div class="line">        SharedPreUtils.setInteger(context, <span class="string">"alarm_id"</span>, ++alarmId);</div><div class="line">        PendingIntent sender = PendingIntent.getBroadcast(context, alarmId, myIntent, <span class="number">0</span>);</div><div class="line">        AlarmManager alarm = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);</div><div class="line">        alarm.set(AlarmManagerType, cycTime, sender);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 取消闹钟</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@param</span> action</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cancelAlarmTimer</span><span class="params">(Context context, String action)</span> </span>&#123;</div><div class="line">        Intent myIntent = <span class="keyword">new</span> Intent();</div><div class="line">        myIntent.setAction(action);</div><div class="line">        PendingIntent sender = PendingIntent.getBroadcast(context, <span class="number">0</span>, myIntent,<span class="number">0</span>);</div><div class="line">        AlarmManager alarm = (AlarmManager) context.getSystemService(Context.ALARM_SERVICE);</div><div class="line">        alarm.cancel(sender);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;AlarmManager简介&quot;&gt;&lt;a href=&quot;#AlarmManager简介&quot; class=&quot;headerlink&quot; title=&quot;AlarmManager简介&quot;&gt;&lt;/a&gt;AlarmManager简介&lt;/h3&gt;&lt;p&gt;　　AlarmManager实质是一个全局的定时器，是Android中常用的一种系统级别的提示服务，在指定时间或周期性启动其它组件（包括Activity,Service,BroadcastReceiver）。本文将讲解一下如何使用AlarmManager实现定时提醒功能。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="AlarmManager" scheme="http://LeiHolmes.github.io/tags/AlarmManager/"/>
    
  </entry>
  
  <entry>
    <title>网络请求框架之Retrofit2.0基本讲解</title>
    <link href="http://LeiHolmes.github.io/2016/04/29/%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%A1%86%E6%9E%B6%E4%B9%8BRetrofit2.0%E5%9F%BA%E6%9C%AC%E8%AE%B2%E8%A7%A3/"/>
    <id>http://LeiHolmes.github.io/2016/04/29/网络请求框架之Retrofit2.0基本讲解/</id>
    <published>2016-04-28T16:00:00.000Z</published>
    <updated>2017-11-01T01:15:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Retrofit2-0简介"><a href="#Retrofit2-0简介" class="headerlink" title="Retrofit2.0简介"></a>Retrofit2.0简介</h3><p>　　Retrofit是一套RESTful架构的Android(Java)客户端实现，基于注解，提供JSON to POJO(Plain Ordinary Java Object,简单Java对象)，POJO to JSON，网络请求(POST，GET,PUT，DELETE等)封装。用官方自己的介绍就是:</p>
<blockquote>
<p>A type-safe REST client for Android and Java</p>
</blockquote>
<p>　　现已更新到2.0的版本，与1.0版本的使用上还是不小的差别，我也是第一次用，这里主要和大家研究研究2.0版本简单使用。也可参详<a href="http://square.github.io/retrofit/" target="_blank" rel="external">官方示例</a>。<br><a id="more"></a>  </p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="添加权限"><a href="#添加权限" class="headerlink" title="添加权限"></a>添加权限</h4><p>　　首先添加网络请求权限<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>　　Retrofit2.0版本后只支持okhttp请求，也已经封装好了，就不需要添加okhttp的依赖了。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile 'com.squareup.retrofit2:retrofit:2.0.2'</div><div class="line">    compile 'com.squareup.retrofit2:converter-gson:2.0.0-beta3'</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><p>　　接下来瞧一瞧Retrofit初始化以及如何请求数据。</p>
<h4 id="初始化Retrofit对象"><a href="#初始化Retrofit对象" class="headerlink" title="初始化Retrofit对象"></a>初始化Retrofit对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String BASE_URL = <span class="string">"https://api.github.com/"</span>;</div><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">        .baseUrl(BASE_URL)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .build();</div></pre></td></tr></table></figure>
<p>　　BASE_URL就是你请求的Server地址。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.addConverterFactory(GsonConverterFactory.create())</div></pre></td></tr></table></figure></p>
<p>　　Retrofit2.0不提供返回JSON数据的默认解析方式，需要手动指定，支持Jackson等多种解析方式。需要哪种就添加相应的依赖，这里添加的是Retrofit提供的converter-gson依赖。有点不爽的就是不支持FastJson解析，有需要的话可以自己写一个FastjsonConverterFactory继承Converter.Factory实现。<br>　　虽然Retrofit2.0后只支持okhttp请求，但你也可以自定义一个okhttp再配置进Retrofit。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">client.interceptors().add(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">            Response response = chain.proceed(chain.request());</div><div class="line">            <span class="comment">// Do anything with response here</span></div><div class="line">            <span class="keyword">return</span> response;</div><div class="line">        &#125;</div><div class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">        .baseUrl(BASE_URL)</div><div class="line">        .client(client)</div><div class="line">        .addConverterFactory(GsonConverterFactory.create())</div><div class="line">        .build();</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="定义请求接口"><a href="#定义请求接口" class="headerlink" title="定义请求接口"></a>定义请求接口</h4><p>　　实现转换HTTP API为Java接口，Retrofit提供了5种内置的注解：GET、POST、PUT、DELETE和HEAD，在注解中指定的资源的相对URL。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">NetWorkService</span> </span>&#123;</div><div class="line">	<span class="meta">@GET</span>(<span class="string">"users/basil2style"</span>)</div><div class="line">    <span class="function">Call&lt;DataBean&gt; <span class="title">getData</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　使用替换块和参数进行动态更新,替换块是{ and }包围的字母数字组成的字符串，相应的参数必须使用相同的字符串被@Path进行注释。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"repos/&#123;params1&#125;/&#123;params2&#125;/contributors"</span>)</div><div class="line">Call&lt;List&lt;DataBean2&gt;&gt; getData(</div><div class="line">        <span class="meta">@Path</span>(<span class="string">"params1"</span>) String params1,</div><div class="line">        <span class="meta">@Path</span>(<span class="string">"params2"</span>) String params2,</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>　　当我们调用getData()这个方法的时候，Retrofit会创建这个URL。如果我们传入Square和Retrofit字符串，分别作为owner和repo参数。我们就会得到这个URL：<a href="https://api.github.com/repos/square/retrofit/contributors" target="_blank" rel="external">https://api.github.com/repos/square/retrofit/contributors</a><br>　　添加查询参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"repos/square/&#123;retrofit&#125;/contributors"</span>)</div><div class="line">Call&lt;List&lt;DataBean2&gt;&gt; groupData(<span class="meta">@Path</span>(<span class="string">"retrofit"</span>) String retrofit, <span class="meta">@Query</span>(<span class="string">"sort"</span>) String sort);</div></pre></td></tr></table></figure></p>
<p>　　当我们调用getData()方法时，传入一个查询参数字符串”ok”,这样我们就能得到URL：<a href="https://api.github.com/repos/square/retrofit/contributors?sort=ok" target="_blank" rel="external">https://api.github.com/repos/square/retrofit/contributors?sort=ok</a><br>　　当然如果查询参数过多，我们也可以使用Map进行组合再传进来。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GET</span>(<span class="string">"repos/square/&#123;retrofit&#125;/contributors"</span>)</div><div class="line">Call&lt;List&lt;DataBean2&gt;&gt; getData(<span class="meta">@Path</span>(<span class="string">"repos"</span>) String repos, <span class="meta">@QueryMap</span> Map&lt;String, String&gt; parameters);</div></pre></td></tr></table></figure></p>
<h4 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h4><p>　　Retrifot支持同步和异步的请求方式，先使用Retrofit类生成接口NetWorkService的实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NetWorkService service = retrofit.create(NetWorkService.class);</div></pre></td></tr></table></figure></p>
<h5 id="同步请求"><a href="#同步请求" class="headerlink" title="同步请求"></a>同步请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Call&lt;DataBean&gt; call = service.getData(Square,Retrofit);</div><div class="line">DataBean bean = call.execute().body();</div></pre></td></tr></table></figure>
<p>　　注意同步请求不可在主线程执行，你懂得。且call只能执行execute()方法一次，若要再次请求可通过<code>Call&lt;DataBean&gt; call = call.clone()</code>来再复制一个Call对象。</p>
<h5 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">call.enqueue(<span class="keyword">new</span> Callback&lt;DataBean&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(Call&lt;DataBean&gt; call, Response&lt;DataBean&gt; response)</span> </span>&#123;</div><div class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"请求成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        DataBean bean = response.body();</div><div class="line">        tvMain.setText(bean.toString());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Call&lt;DataBean&gt; call, Throwable t)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>　　当我们执行的同步或异步加入队列后，可以随时使用call.cancel()方法取消请求。</p>
<h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>　　注解中参数的写法与BASE_URL的拼接一定要注意，请看以下写法。</p>
<h4 id="错误示例1"><a href="#错误示例1" class="headerlink" title="错误示例1"></a>错误示例1</h4><p>　　BASE_URL：<a href="https://api.github.com/repos/square" target="_blank" rel="external">https://api.github.com/repos/square</a><br>　　Get注解：　@GET(“/basil2style”)<br>　　结果URL：　<a href="https://api.github.com/basil2style" target="_blank" rel="external">https://api.github.com/basil2style</a></p>
<h4 id="错误示例2"><a href="#错误示例2" class="headerlink" title="错误示例2"></a>错误示例2</h4><p>　　BASE_URL：<a href="https://api.github.com/repos/square" target="_blank" rel="external">https://api.github.com/repos/square</a><br>　　Get注解：　@GET(“basil2style”)<br>　　结果URL：　<a href="https://api.github.com/repos/basil2style" target="_blank" rel="external">https://api.github.com/repos/basil2style</a></p>
<h4 id="推荐写法"><a href="#推荐写法" class="headerlink" title="推荐写法"></a>推荐写法</h4><p>　　BASE_URL：<a href="https://api.github.com/repos/square/" target="_blank" rel="external">https://api.github.com/repos/square/</a><br>　　Get注解：　@GET(“basil2style”)<br>　　结果URL：　<a href="https://api.github.com/repos/square/basil2style" target="_blank" rel="external">https://api.github.com/repos/square/basil2style</a></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　Retrofit2.0的基本实现讲解完毕，Retrofit+Okhttp+Gson可以算是目前来说相当快的超级网络请求框架了。相比较于Volley都快不少，亲测结果很爽。小伙伴们赶紧整起来吧！<br>　　技术渣一枚，有写的不对的地方欢迎大神们留言指正，有什么疑惑或者不懂的地方也可以在我Github上Retrofit2Demo项目的Issues中提出，我会及时解答。附上Retrofit2Demo的地址：<br>　　<a href="https://github.com/LeiHolmes/Retrofit2Demo" target="_blank" rel="external">Retrofit2Demo</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Retrofit2-0简介&quot;&gt;&lt;a href=&quot;#Retrofit2-0简介&quot; class=&quot;headerlink&quot; title=&quot;Retrofit2.0简介&quot;&gt;&lt;/a&gt;Retrofit2.0简介&lt;/h3&gt;&lt;p&gt;　　Retrofit是一套RESTful架构的Android(Java)客户端实现，基于注解，提供JSON to POJO(Plain Ordinary Java Object,简单Java对象)，POJO to JSON，网络请求(POST，GET,PUT，DELETE等)封装。用官方自己的介绍就是:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A type-safe REST client for Android and Java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;　　现已更新到2.0的版本，与1.0版本的使用上还是不小的差别，我也是第一次用，这里主要和大家研究研究2.0版本简单使用。也可参详&lt;a href=&quot;http://square.github.io/retrofit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方示例&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="Retrofit" scheme="http://LeiHolmes.github.io/tags/Retrofit/"/>
    
  </entry>
  
  <entry>
    <title>如何使用神器Stetho调试Volley</title>
    <link href="http://LeiHolmes.github.io/2016/04/19/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E7%A5%9E%E5%99%A8Stetho%E8%B0%83%E8%AF%95Volley/"/>
    <id>http://LeiHolmes.github.io/2016/04/19/如何使用神器Stetho调试Volley/</id>
    <published>2016-04-18T16:00:00.000Z</published>
    <updated>2017-09-28T08:55:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Stetho简介"><a href="#Stetho简介" class="headerlink" title="Stetho简介"></a>Stetho简介</h3><p>　　Stetho 是 Facebook 开源的一个 Android 调试工具。是一个 Chrome Developer Tools 的扩展，可用来检测应用的网络、数据库、WebKit 等方面的功能。开发者也可通过它的 dumpapp 工具提供强大的命令行接口来访问应用内部。无需root查看sqlite文件、sharedpreference文件等等。更多详细介绍可以进入<a href="http://facebook.github.io/stetho/" target="_blank" rel="external">Stetho官网</a>。<br><a id="more"></a></p>
<h3 id="Stetho结合OkHttp使用"><a href="#Stetho结合OkHttp使用" class="headerlink" title="Stetho结合OkHttp使用"></a>Stetho结合OkHttp使用</h3><h5 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Gradle dependency on Stetho </div><div class="line">  dependencies &#123; </div><div class="line">    compile 'com.facebook.stetho:stetho:1.1.1' </div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h5 id="Stetho初始化配置"><a href="#Stetho初始化配置" class="headerlink" title="Stetho初始化配置"></a>Stetho初始化配置</h5><p>在App的Application中完成初始化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate();</div><div class="line">    Stetho.initialize(</div><div class="line">      Stetho.newInitializerBuilder(<span class="keyword">this</span>)</div><div class="line">        .enableDumpapp(</div><div class="line">            Stetho.defaultDumperPluginsProvider(<span class="keyword">this</span>))</div><div class="line">        .enableWebKitInspector(</div><div class="line">            Stetho.defaultInspectorModulesProvider(<span class="keyword">this</span>))</div><div class="line">        .build());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>官网中使用OkHttp为实例，使用如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">client.networkInterceptors().add(<span class="keyword">new</span> StethoInterceptor());</div></pre></td></tr></table></figure></p>
<p>然后就可以运行App进行调试，基本上可以满足调试需求了。</p>
<h3 id="Stetho结合Volley使用"><a href="#Stetho结合Volley使用" class="headerlink" title="Stetho结合Volley使用"></a>Stetho结合Volley使用</h3><p>官网中Stetho是结合OkHttp的使用，如果项目中使用Volley做为网络请求框架，可以做如下修改。还是使用OkHttp做为Volley中HttpStack的实现，我们知道，Volley中网络请求在Android2.3及以上基于HttpURLConnection，2.3以下基于HttpClient实现，通过增加HttpStack的具体实现即可。这里使用<a href="https://gist.github.com/bryanstern/4e8f1cb5a8e14c202750" target="_blank" rel="external">Bryan Stern分享的代码</a>。（网页可能被墙，可以通过VPN访问。需要VPN的可以<a href="http://reftizi.com/?r=bf31aecac9700bac" target="_blank" rel="external">点击这里</a>）</p>
<h5 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">compile 'com.facebook.stetho:stetho:1.1.1'</div><div class="line">compile 'com.facebook.stetho:stetho-okhttp:1.1.1'</div><div class="line">compile 'com.squareup.okhttp:okhttp:2.3.0'</div></pre></td></tr></table></figure>
<h5 id="Stetho初始化配置-1"><a href="#Stetho初始化配置-1" class="headerlink" title="Stetho初始化配置"></a>Stetho初始化配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">client.networkInterceptors().add(<span class="keyword">new</span> StethoInterceptor());</div><div class="line">mRequestQueue = Volley.newRequestQueue(getApplicationContext(), <span class="keyword">new</span> OkHttpStack(client));</div></pre></td></tr></table></figure>
<p>好了，基本上这样就能使用Stetho神器调试你的App了，感觉到强大了么~。</p>
<h3 id="补充：使用中遇到的坑"><a href="#补充：使用中遇到的坑" class="headerlink" title="补充：使用中遇到的坑"></a>补充：使用中遇到的坑</h3><ul>
<li><p>Stetho inspect窗口空白 </p>
<p>如果出现调试窗口空白，先升级下Chrome吧。升级最新版后再试一下（我被这个坑了）。</p>
</li>
<li><p>Stetho inspect窗口还是空白 </p>
<p>如果Chrome是最新版，无论如何刷新都是空白，那么恭喜你你可能被墙了~用VPN试试吧 <a href="!http://reftizi.com/?r=bf31aecac9700bac">可以戳这里哦</a></p>
</li>
</ul>
<h3 id="我的测试代码和效果图如下："><a href="#我的测试代码和效果图如下：" class="headerlink" title="我的测试代码和效果图如下："></a>我的测试代码和效果图如下：</h3><p>自定义Application类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppliation</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate();</div><div class="line">		context = getApplicationContext();</div><div class="line">		instance = <span class="keyword">this</span>;</div><div class="line"></div><div class="line">		Stetho.initialize(</div><div class="line">				Stetho.newInitializerBuilder(<span class="keyword">this</span>)</div><div class="line">						.enableDumpapp(Stetho.defaultDumperPluginsProvider(<span class="keyword">this</span>))</div><div class="line">						.enableWebKitInspector(Stetho.defaultInspectorModulesProvider(<span class="keyword">this</span>))</div><div class="line">						.build());</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * <span class="doctag">@return</span> The Volley Request queue</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> RequestQueue <span class="title">getRequestQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="comment">// lazy initialize the request queue, the queue instance will be</span></div><div class="line">		<span class="comment">// created when it is accessed for the first time</span></div><div class="line">		<span class="keyword">synchronized</span> (App.class) &#123;</div><div class="line">			<span class="keyword">if</span> (mRequestQueue == <span class="keyword">null</span>) &#123;</div><div class="line">				OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">				client.networkInterceptors().add(<span class="keyword">new</span> StethoInterceptor());</div><div class="line">				mRequestQueue = Volley.newRequestQueue(getApplicationContext(), <span class="keyword">new</span> OkHttpStack(client));</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> mRequestQueue;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Activity类代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TextView tv;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.layout_main);</div><div class="line">        tv = (TextView)findViewById(R.id.tv);</div><div class="line"></div><div class="line">        RequestQueue queue = App.getInstance().getRequestQueue();</div><div class="line">        String url = <span class="string">"https://publicobject.com/helloworld.txt"</span>;</div><div class="line">        StringRequest request = <span class="keyword">new</span> StringRequest(Request.Method.GET, url, <span class="keyword">new</span> Response.Listener&lt;String&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                LogUtil.d(s);</div><div class="line">                tv.setText(s);</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="keyword">new</span> com.android.volley.Response.ErrorListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onErrorResponse</span><span class="params">(VolleyError volleyError)</span> </span>&#123;</div><div class="line">                LogUtil.e(volleyError.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        queue.add(request);</div><div class="line"></div><div class="line">        SharedPrfUtil.setInt(<span class="string">"uid"</span>,<span class="number">669</span>);</div><div class="line">        SharedPrfUtil.setString(<span class="string">"username"</span>,<span class="string">"dongye"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实现效果如下图：</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://dongyeforever.qiniudn.com/stetho-all.png" alt="Stetho调试效果图" title="">
                </div>
                <div class="image-caption">Stetho调试效果图</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://dongyeforever.qiniudn.com/stetho-inspect.png" alt="调试程序列表" title="">
                </div>
                <div class="image-caption">调试程序列表</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://dongyeforever.qiniudn.com/inspect-network.png" alt="调试网络请求" title="">
                </div>
                <div class="image-caption">调试网络请求</div>
            </figure>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://dongyeforever.qiniudn.com/inspect-sharedpreference.png" alt="读取数据存储" title="">
                </div>
                <div class="image-caption">读取数据存储</div>
            </figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Stetho简介&quot;&gt;&lt;a href=&quot;#Stetho简介&quot; class=&quot;headerlink&quot; title=&quot;Stetho简介&quot;&gt;&lt;/a&gt;Stetho简介&lt;/h3&gt;&lt;p&gt;　　Stetho 是 Facebook 开源的一个 Android 调试工具。是一个 Chrome Developer Tools 的扩展，可用来检测应用的网络、数据库、WebKit 等方面的功能。开发者也可通过它的 dumpapp 工具提供强大的命令行接口来访问应用内部。无需root查看sqlite文件、sharedpreference文件等等。更多详细介绍可以进入&lt;a href=&quot;http://facebook.github.io/stetho/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stetho官网&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
      <category term="Android" scheme="http://LeiHolmes.github.io/categories/Android/"/>
    
    
      <category term="Stetho" scheme="http://LeiHolmes.github.io/tags/Stetho/"/>
    
  </entry>
  
</feed>
